{
	"info": {
		"_postman_id": "abf75a63-88bf-42bb-ba6f-a4e8f09e77d2",
		"name": "ClickUp - Goals",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9043182"
	},
	"item": [
		{
			"name": "Get goals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Validate the structure of the goals array\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.goals).to.be.an('array').and.to.have.length.above(0);",
							"    responseData.goals.forEach(function(goal) {",
							"        pm.expect(goal).to.be.an('object');",
							"        pm.expect(goal).to.have.property('id');",
							"        pm.expect(goal).to.have.property('pretty_id');",
							"        pm.expect(goal).to.have.property('name');",
							"        pm.expect(goal).to.have.property('team_id');",
							"        pm.expect(goal).to.have.property('creator');",
							"        pm.expect(goal).to.have.property('owner');",
							"        pm.expect(goal).to.have.property('color');",
							"        pm.expect(goal).to.have.property('date_created');",
							"        pm.expect(goal).to.have.property('start_date');",
							"        pm.expect(goal).to.have.property('due_date');",
							"        pm.expect(goal).to.have.property('description');",
							"        pm.expect(goal).to.have.property('private');",
							"        pm.expect(goal).to.have.property('archived');",
							"        pm.expect(goal).to.have.property('multiple_owners');",
							"        pm.expect(goal).to.have.property('editor_token');",
							"        pm.expect(goal).to.have.property('date_updated');",
							"        pm.expect(goal).to.have.property('last_update');",
							"        pm.expect(goal).to.have.property('folder_id');",
							"        pm.expect(goal).to.have.property('pinned');",
							"        pm.expect(goal).to.have.property('owners');",
							"        pm.expect(goal).to.have.property('key_result_count');",
							"        pm.expect(goal).to.have.property('members');",
							"        pm.expect(goal).to.have.property('group_members');",
							"        pm.expect(goal).to.have.property('percent_completed');",
							"    });",
							"});",
							"",
							"pm.test(\"Goals array should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.goals).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"Goals array should have valid name and due_date fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.goals).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.goals.forEach(function(goal) {",
							"        pm.expect(goal).to.have.property('name').that.is.a('string').and.is.not.empty;",
							"        pm.expect(goal).to.have.property('due_date').that.is.a('string').and.is.not.empty;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/team/{{team_id}}/goal?include_completed=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"team",
						"{{team_id}}",
						"goal"
					],
					"query": [
						{
							"key": "include_completed",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// save id in variable \"goal_id\" for reusing",
							"var response = pm.response.json();",
							"console.log(response.id)",
							"pm.collectionVariables.set(\"goal_id\", response.goal.id);",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Goal object has all the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.goal).to.be.an('object');",
							"    pm.expect(responseData.goal.id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.pretty_id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.team_id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.creator).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.goal.color).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.date_created).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.start_date).to.be.null;",
							"    pm.expect(responseData.goal.due_date).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.description).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.private).to.be.a('boolean');",
							"    pm.expect(responseData.goal.archived).to.be.a('boolean');",
							"    pm.expect(responseData.goal.multiple_owners).to.be.a('boolean');",
							"    pm.expect(responseData.goal.editor_token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.date_updated).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.goal.folder_id).to.be.null;",
							"    pm.expect(responseData.goal.folder_name).to.be.null;",
							"    pm.expect(responseData.goal.members).to.be.an('array');",
							"    pm.expect(responseData.goal.group_members).to.be.an('array');",
							"    pm.expect(responseData.goal.owners).to.be.an('array');",
							"    pm.expect(responseData.goal.key_results).to.be.an('array');",
							"    pm.expect(responseData.goal.key_result_count).to.be.a('number');",
							"    pm.expect(responseData.goal.percent_completed).to.be.a('number');",
							"    pm.expect(responseData.goal.history).to.be.an('array');",
							"    pm.expect(responseData.goal.pretty_url).to.exist.and.to.be.a('string');",
							"});",
							"",
							"var savedGoalId = pm.collectionVariables.get(\"goal_id\");",
							"var savedTeamId = pm.collectionVariables.get(\"team_id\");",
							"",
							"pm.test(\"Data is correct\", function () {",
							"    pm.expect(response.goal.id).to.eql(savedGoalId);",
							"    pm.expect(response.goal.name).to.eql(\"Goal Name\");",
							"    pm.expect(response.goal.team_id).to.eql(savedTeamId);",
							"    pm.expect(response.goal.creator).to.eql(2144410100);",
							"    pm.expect(response.goal.color).to.eql(\"#32a852\");",
							"    pm.expect(response.goal.description).to.eql(\"Goal Description\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Goal Name\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": true,\n    \"color\": \"#32a852\"\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/team/{{team_id}}/goal",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"team",
						"{{team_id}}",
						"goal"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var savedGoalId = pm.collectionVariables.get(\"goal_id\");\r",
							"var savedTeamId = pm.collectionVariables.get(\"team_id\");\r",
							"\r",
							"pm.test(\"Data is correct\", function () {\r",
							"    pm.expect(response.goal.id).to.eql(savedGoalId);\r",
							"    pm.expect(response.goal.name).to.eql(\"Goal Name\");\r",
							"    pm.expect(response.goal.team_id).to.eql(savedTeamId);\r",
							"    pm.expect(response.goal.creator).to.eql(2144410100);\r",
							"    pm.expect(response.goal.color).to.eql(\"#32a852\");\r",
							"    pm.expect(response.goal.description).to.eql(\"Goal Description\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the structure of the goal object\", function () {\r",
							"    const responseData = pm.response.json().goal;\r",
							"  \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('pretty_id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('team_id');\r",
							"    pm.expect(responseData).to.have.property('creator');\r",
							"    pm.expect(responseData).to.have.property('color');\r",
							"    pm.expect(responseData).to.have.property('date_created');\r",
							"    pm.expect(responseData).to.have.property('start_date');\r",
							"    pm.expect(responseData).to.have.property('due_date');\r",
							"    pm.expect(responseData).to.have.property('description');\r",
							"    pm.expect(responseData).to.have.property('private');\r",
							"    pm.expect(responseData).to.have.property('archived');\r",
							"    pm.expect(responseData).to.have.property('multiple_owners');\r",
							"    pm.expect(responseData).to.have.property('editor_token');\r",
							"    pm.expect(responseData).to.have.property('date_updated');\r",
							"    pm.expect(responseData).to.have.property('folder_id');\r",
							"    pm.expect(responseData).to.have.property('folder_name');\r",
							"    pm.expect(responseData).to.have.property('members');\r",
							"    pm.expect(responseData).to.have.property('group_members');\r",
							"    pm.expect(responseData).to.have.property('owners');\r",
							"    pm.expect(responseData).to.have.property('key_results');\r",
							"    pm.expect(responseData).to.have.property('key_result_count');\r",
							"    pm.expect(responseData).to.have.property('percent_completed');\r",
							"    pm.expect(responseData).to.have.property('history');\r",
							"    pm.expect(responseData).to.have.property('pretty_url');\r",
							"});\r",
							"\r",
							"pm.test(\"Key results array has the correct structure\", function () {\r",
							"    const responseData = pm.response.json().goal;\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('key_results').that.is.an('array');\r",
							"    \r",
							"    responseData.key_results.forEach(function(keyResult) {\r",
							"        pm.expect(keyResult).to.have.property('id');\r",
							"        pm.expect(keyResult).to.have.property('goal_id');\r",
							"        pm.expect(keyResult).to.have.property('name');\r",
							"        pm.expect(keyResult).to.have.property('creator');\r",
							"        pm.expect(keyResult).to.have.property('owner');\r",
							"        pm.expect(keyResult).to.have.property('type');\r",
							"        pm.expect(keyResult).to.have.property('date_created');\r",
							"        pm.expect(keyResult).to.have.property('steps_start');\r",
							"        pm.expect(keyResult).to.have.property('steps_end');\r",
							"        pm.expect(keyResult).to.have.property('steps_current');\r",
							"        pm.expect(keyResult).to.have.property('unit');\r",
							"        pm.expect(keyResult).to.have.property('workspace_id');\r",
							"        pm.expect(keyResult).to.have.property('goal_pretty_id');\r",
							"        pm.expect(keyResult).to.have.property('percent_completed');\r",
							"        pm.expect(keyResult).to.have.property('completed');\r",
							"        pm.expect(keyResult).to.have.property('task_ids').that.is.an('array');\r",
							"        pm.expect(keyResult).to.have.property('subcategory_ids').that.is.an('array');\r",
							"        pm.expect(keyResult).to.have.property('last_action').that.is.an('object');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Goal object has required keys and data types\", function () {\r",
							"    const responseData = pm.response.json().goal;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('pretty_id').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('team_id').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('creator').that.is.a('number');\r",
							"    pm.expect(responseData).to.have.property('color').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('date_created').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('start_date').that.is.null;\r",
							"    pm.expect(responseData).to.have.property('due_date').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('description').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('private').that.is.a('boolean');\r",
							"    pm.expect(responseData).to.have.property('archived').that.is.a('boolean');\r",
							"    pm.expect(responseData).to.have.property('multiple_owners').that.is.a('boolean');\r",
							"    pm.expect(responseData).to.have.property('editor_token').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('date_updated').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('folder_id').that.is.null;\r",
							"    pm.expect(responseData).to.have.property('folder_name').that.is.null;\r",
							"    pm.expect(responseData).to.have.property('members').that.is.an('array');\r",
							"    pm.expect(responseData).to.have.property('group_members').that.is.an('array');\r",
							"    pm.expect(responseData).to.have.property('owners').that.is.an('array');\r",
							"    pm.expect(responseData).to.have.property('key_results').that.is.an('array');\r",
							"    pm.expect(responseData).to.have.property('key_result_count').that.is.a('number');\r",
							"    pm.expect(responseData).to.have.property('percent_completed').that.is.a('number');\r",
							"    pm.expect(responseData).to.have.property('history').that.is.an('array');\r",
							"    pm.expect(responseData).to.have.property('pretty_url').that.is.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct updated goal data\", function () {\r",
							"    var response = pm.response.json();\r",
							"    var goalData = response.goal;\r",
							"\r",
							"    var expectedName = \"Updated Goal Name\";\r",
							"    var expectedDueDate = 1568036964079;\r",
							"    var expectedDescription = \"Updated Goal Description\";\r",
							"    var expectedColor = \"#32a852\";\r",
							"\r",
							"    pm.expect(goalData.name).to.eql(expectedName);\r",
							"    pm.expect(parseInt(goalData.due_date)).to.eql(expectedDueDate);\r",
							"    pm.expect(goalData.description).to.eql(expectedDescription);\r",
							"    pm.expect(goalData.color).to.eql(expectedColor);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the structure of the 'goal' object in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.goal).to.be.an('object');\r",
							"    pm.expect(responseData.goal).to.have.property('id');\r",
							"    pm.expect(responseData.goal).to.have.property('pretty_id');\r",
							"    pm.expect(responseData.goal).to.have.property('name');\r",
							"    pm.expect(responseData.goal).to.have.property('team_id');\r",
							"    pm.expect(responseData.goal).to.have.property('creator');\r",
							"    pm.expect(responseData.goal).to.have.property('color');\r",
							"    pm.expect(responseData.goal).to.have.property('date_created');\r",
							"    pm.expect(responseData.goal).to.have.property('start_date');\r",
							"    pm.expect(responseData.goal).to.have.property('due_date');\r",
							"    pm.expect(responseData.goal).to.have.property('description');\r",
							"    pm.expect(responseData.goal).to.have.property('private');\r",
							"    pm.expect(responseData.goal).to.have.property('archived');\r",
							"    pm.expect(responseData.goal).to.have.property('multiple_owners');\r",
							"    pm.expect(responseData.goal).to.have.property('editor_token');\r",
							"    pm.expect(responseData.goal).to.have.property('date_updated');\r",
							"    pm.expect(responseData.goal).to.have.property('folder_id');\r",
							"    pm.expect(responseData.goal).to.have.property('folder_name');\r",
							"    pm.expect(responseData.goal).to.have.property('members');\r",
							"    pm.expect(responseData.goal).to.have.property('group_members');\r",
							"    pm.expect(responseData.goal).to.have.property('owners');\r",
							"    pm.expect(responseData.goal).to.have.property('key_results');\r",
							"    pm.expect(responseData.goal).to.have.property('key_result_count');\r",
							"    pm.expect(responseData.goal).to.have.property('percent_completed');\r",
							"    pm.expect(responseData.goal).to.have.property('history');\r",
							"    pm.expect(responseData.goal).to.have.property('pretty_url');\r",
							"});\r",
							"\r",
							"pm.test(\"Goal object has required fields with expected data types and formats\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.goal).to.be.an('object');\r",
							"    pm.expect(responseData.goal.id).to.be.a('string');\r",
							"    pm.expect(responseData.goal.pretty_id).to.be.a('string');\r",
							"    pm.expect(responseData.goal.name).to.be.a('string');\r",
							"    pm.expect(responseData.goal.team_id).to.be.a('string');\r",
							"    pm.expect(responseData.goal.creator).to.be.a('number');\r",
							"    pm.expect(responseData.goal.color).to.be.a('string');\r",
							"    pm.expect(responseData.goal.date_created).to.be.a('string');\r",
							"    pm.expect(responseData.goal.start_date).to.be.a('null');\r",
							"    pm.expect(responseData.goal.due_date).to.be.a('string');\r",
							"    pm.expect(responseData.goal.description).to.be.a('string');\r",
							"    pm.expect(responseData.goal.private).to.be.a('boolean');\r",
							"    pm.expect(responseData.goal.archived).to.be.a('boolean');\r",
							"    pm.expect(responseData.goal.multiple_owners).to.be.a('boolean');\r",
							"    pm.expect(responseData.goal.editor_token).to.be.a('string');\r",
							"    pm.expect(responseData.goal.date_updated).to.be.a('string');\r",
							"    pm.expect(responseData.goal.folder_id).to.be.a('null');\r",
							"    pm.expect(responseData.goal.folder_name).to.be.a('null');\r",
							"    pm.expect(responseData.goal.members).to.be.an('array');\r",
							"    pm.expect(responseData.goal.group_members).to.be.an('array');\r",
							"    pm.expect(responseData.goal.owners).to.be.an('array');\r",
							"    pm.expect(responseData.goal.key_results).to.be.an('array');\r",
							"    pm.expect(responseData.goal.key_result_count).to.be.a('number');\r",
							"    pm.expect(responseData.goal.percent_completed).to.be.a('number');\r",
							"    pm.expect(responseData.goal.history).to.be.an('array');\r",
							"    pm.expect(responseData.goal.pretty_url).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Goal Name\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Updated Goal Description\",\n    \"color\": \"#32a852\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get updated goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct updated goal data\", function () {\r",
							"    var response = pm.response.json();\r",
							"    var goalData = response.goal;\r",
							"\r",
							"    var expectedName = \"Updated Goal Name\";\r",
							"    var expectedDueDate = 1568036964079;\r",
							"    var expectedDescription = \"Updated Goal Description\";\r",
							"    var expectedColor = \"#32a852\";\r",
							"\r",
							"    pm.expect(goalData.name).to.eql(expectedName);\r",
							"    pm.expect(parseInt(goalData.due_date)).to.eql(expectedDueDate);\r",
							"    pm.expect(goalData.description).to.eql(expectedDescription);\r",
							"    pm.expect(goalData.color).to.eql(expectedColor);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Key Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// save id in variable \"key_result_id\" for reusing",
							"var response = pm.response.json();",
							"console.log(response.key_result.id)",
							"pm.collectionVariables.set(\"key_result_id\", response.key_result.id);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Validate the key_result object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.key_result).to.be.an('object');",
							"    pm.expect(responseData.key_result.id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.goal_id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.creator).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.key_result.type).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.date_created).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.unit).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.workspace_id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.goal_pretty_id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.key_result.percent_completed).to.be.null;",
							"    pm.expect(responseData.key_result.completed).to.be.a('boolean');",
							"    pm.expect(responseData.key_result.task_ids).to.be.an('array');",
							"    pm.expect(responseData.key_result.subcategory_ids).to.be.an('array');",
							"    pm.expect(responseData.key_result.owners).to.be.an('array');",
							"    pm.expect(responseData.key_result.last_action).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Ensure that required properties are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.key_result.id).to.exist;",
							"    pm.expect(responseData.key_result.goal_id).to.exist;",
							"    pm.expect(responseData.key_result.name).to.exist;",
							"    pm.expect(responseData.key_result.creator).to.exist;",
							"    pm.expect(responseData.key_result.type).to.exist;",
							"    pm.expect(responseData.key_result.date_created).to.exist;",
							"    pm.expect(responseData.key_result.unit).to.exist;",
							"    pm.expect(responseData.key_result.workspace_id).to.exist;",
							"    pm.expect(responseData.key_result.goal_pretty_id).to.exist;",
							"    pm.expect(responseData.key_result.last_action).to.exist;",
							"});",
							"",
							"pm.test(\"Key result created with specified name\", function () {",
							"    const responseData = pm.response.json();",
							"    const expectedNamePrefix = \"Key Result_\";",
							"    const actualName = responseData.key_result.name;",
							"",
							"    pm.expect(actualName).to.include(expectedNamePrefix);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"protocolVersion": "auto"
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Key Result_{{$randomInt}}\",\n    \"type\": \"number\",\n    \"steps_start\": 0,\n    \"steps_end\": 10,\n    \"unit\": \"km\",\n    \"task_ids\": [],\n    \"list_ids\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}/key_result",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}",
						"key_result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get key_result in the goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var expectedKeyResultId = pm.collectionVariables.get(\"key_result_id\");\r",
							"// Find the desired key_result by ID\r",
							"var keyResult = response.goal.key_results.find(result => result.id === expectedKeyResultId);\r",
							"\r",
							"// Check that key_result exists\r",
							"pm.test(\"Key Result exists\", function () {\r",
							"    pm.expect(keyResult).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"// If key_result exists, we check its data\r",
							"if (keyResult) {\r",
							"    pm.test(\"Key Result has correct name\", function () {\r",
							"        pm.expect(keyResult.name).to.include(\"Key Result_\");\r",
							"    });\r",
							"    \r",
							"    pm.test(\"Key Result has correct steps_start\", function () {\r",
							"        pm.expect(keyResult.steps_start).to.eql(0);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result has correct steps_end\", function () {\r",
							"        pm.expect(keyResult.steps_end).to.eql(10);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result has correct unit\", function () {\r",
							"        pm.expect(keyResult.unit).to.eql(\"km\");\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result has correct percent_completed\", function () {\r",
							"        pm.expect(keyResult.percent_completed).to.eql(0);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result is not completed\", function () {\r",
							"        pm.expect(keyResult.completed).to.eql(false);\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Key Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct edited key_result data\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.key_result.name).to.eql(\"New Key Result Name\");\r",
							"    pm.expect(response.key_result.last_action.note).to.eql(\"Target achieved\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144410100_UHSIC7AK5SLLZTOD067P1TI0QIXO1YGD"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"New Key Result Name\",\n    \"steps_current\": 5,\n    \"note\": \"Target achieved\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/key_result/{{key_result_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"key_result",
						"{{key_result_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get edited key_result in the goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var expectedKeyResultId = pm.collectionVariables.get(\"key_result_id\");\r",
							"// Find the desired key_result by ID\r",
							"var keyResult = response.goal.key_results.find(result => result.id === expectedKeyResultId);\r",
							"\r",
							"var savedGoalId = pm.collectionVariables.get(\"goal_id\");\r",
							"var savedKeyResultId = pm.collectionVariables.get(\"key_result_id\");\r",
							"\r",
							"// Check that key_result exists\r",
							"pm.test(\"Key Result exists\", function () {\r",
							"    pm.expect(keyResult).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"// If key_result exists, we check its data\r",
							"if (keyResult) {\r",
							"    pm.test(\"Key Result has correct name\", function () {\r",
							"        pm.expect(keyResult.name).to.include(\"New Key Result Name\");\r",
							"    });\r",
							"    \r",
							"    pm.test(\"Key Result has correct id\", function () {\r",
							"        pm.expect(keyResult.id).to.eql(savedKeyResultId);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result has correct goal_id\", function () {\r",
							"        pm.expect(keyResult.goal_id).to.eql(savedGoalId);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result has correct steps_end\", function () {\r",
							"        pm.expect(keyResult.steps_end).to.eql(10);\r",
							"    });\r",
							"\r",
							"     pm.test(\"Key Result has correct steps_current\", function () {\r",
							"        pm.expect(keyResult.steps_current).to.eql(5);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Key Result is not completed\", function () {\r",
							"        pm.expect(keyResult.completed).to.eql(false);\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Key Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an empty object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').and.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144410100_UHSIC7AK5SLLZTOD067P1TI0QIXO1YGD"
					}
				],
				"url": {
					"raw": "{{base_url}}/key_result/{{key_result_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"key_result",
						"{{key_result_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get deleted key_result in the goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var expectedKeyResultId = pm.collectionVariables.get(\"key_result_id\");\r",
							"// Find the desired key_result by ID\r",
							"var keyResult = response.goal.key_results.find(result => result.id === expectedKeyResultId);\r",
							"\r",
							"// Check that key_result not exists\r",
							"pm.test(\"Key Result not exists\", function () {\r",
							"    pm.expect(keyResult).to.be.undefined;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an empty object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').and.to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application /json"
					}
				],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get deleted goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Goal not found message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Goal Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response does not contain the expected goal object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property('goal');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{auth}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/goal/{{goal_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"goal",
						"{{goal_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "team_id",
			"value": "9012290639",
			"type": "string"
		},
		{
			"key": "auth",
			"value": "pk_2144410100_UHSIC7AK5SLLZTOD067P1TI0QIXO1YGD",
			"type": "string"
		},
		{
			"key": "list_id",
			"value": ""
		},
		{
			"key": "goal_id",
			"value": ""
		},
		{
			"key": "key_result_id",
			"value": ""
		}
	]
}