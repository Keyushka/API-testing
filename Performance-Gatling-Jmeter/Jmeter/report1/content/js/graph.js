/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 10359.0, "series": [{"data": [[0.0, 7.0], [0.1, 14.0], [0.2, 17.0], [0.3, 22.0], [0.4, 25.0], [0.5, 29.0], [0.6, 32.0], [0.7, 37.0], [0.8, 41.0], [0.9, 44.0], [1.0, 50.0], [1.1, 55.0], [1.2, 57.0], [1.3, 62.0], [1.4, 67.0], [1.5, 71.0], [1.6, 75.0], [1.7, 80.0], [1.8, 84.0], [1.9, 90.0], [2.0, 94.0], [2.1, 98.0], [2.2, 100.0], [2.3, 101.0], [2.4, 102.0], [2.5, 104.0], [2.6, 104.0], [2.7, 105.0], [2.8, 106.0], [2.9, 106.0], [3.0, 106.0], [3.1, 107.0], [3.2, 108.0], [3.3, 108.0], [3.4, 109.0], [3.5, 109.0], [3.6, 110.0], [3.7, 110.0], [3.8, 111.0], [3.9, 112.0], [4.0, 112.0], [4.1, 113.0], [4.2, 113.0], [4.3, 114.0], [4.4, 114.0], [4.5, 115.0], [4.6, 115.0], [4.7, 116.0], [4.8, 116.0], [4.9, 117.0], [5.0, 118.0], [5.1, 118.0], [5.2, 119.0], [5.3, 120.0], [5.4, 120.0], [5.5, 121.0], [5.6, 121.0], [5.7, 121.0], [5.8, 122.0], [5.9, 122.0], [6.0, 122.0], [6.1, 123.0], [6.2, 123.0], [6.3, 124.0], [6.4, 124.0], [6.5, 125.0], [6.6, 125.0], [6.7, 126.0], [6.8, 126.0], [6.9, 126.0], [7.0, 127.0], [7.1, 127.0], [7.2, 127.0], [7.3, 128.0], [7.4, 128.0], [7.5, 129.0], [7.6, 129.0], [7.7, 130.0], [7.8, 130.0], [7.9, 131.0], [8.0, 131.0], [8.1, 132.0], [8.2, 132.0], [8.3, 132.0], [8.4, 133.0], [8.5, 133.0], [8.6, 133.0], [8.7, 134.0], [8.8, 134.0], [8.9, 135.0], [9.0, 135.0], [9.1, 136.0], [9.2, 136.0], [9.3, 137.0], [9.4, 137.0], [9.5, 138.0], [9.6, 138.0], [9.7, 139.0], [9.8, 139.0], [9.9, 139.0], [10.0, 140.0], [10.1, 140.0], [10.2, 141.0], [10.3, 141.0], [10.4, 142.0], [10.5, 142.0], [10.6, 143.0], [10.7, 144.0], [10.8, 144.0], [10.9, 144.0], [11.0, 145.0], [11.1, 146.0], [11.2, 146.0], [11.3, 147.0], [11.4, 147.0], [11.5, 148.0], [11.6, 148.0], [11.7, 149.0], [11.8, 149.0], [11.9, 150.0], [12.0, 150.0], [12.1, 150.0], [12.2, 151.0], [12.3, 152.0], [12.4, 152.0], [12.5, 153.0], [12.6, 154.0], [12.7, 154.0], [12.8, 155.0], [12.9, 155.0], [13.0, 156.0], [13.1, 156.0], [13.2, 157.0], [13.3, 158.0], [13.4, 158.0], [13.5, 159.0], [13.6, 159.0], [13.7, 160.0], [13.8, 160.0], [13.9, 161.0], [14.0, 161.0], [14.1, 162.0], [14.2, 162.0], [14.3, 163.0], [14.4, 163.0], [14.5, 164.0], [14.6, 165.0], [14.7, 165.0], [14.8, 166.0], [14.9, 166.0], [15.0, 166.0], [15.1, 167.0], [15.2, 168.0], [15.3, 168.0], [15.4, 169.0], [15.5, 169.0], [15.6, 170.0], [15.7, 170.0], [15.8, 171.0], [15.9, 171.0], [16.0, 172.0], [16.1, 172.0], [16.2, 172.0], [16.3, 173.0], [16.4, 173.0], [16.5, 173.0], [16.6, 174.0], [16.7, 174.0], [16.8, 174.0], [16.9, 174.0], [17.0, 175.0], [17.1, 175.0], [17.2, 175.0], [17.3, 176.0], [17.4, 176.0], [17.5, 177.0], [17.6, 177.0], [17.7, 177.0], [17.8, 178.0], [17.9, 178.0], [18.0, 178.0], [18.1, 178.0], [18.2, 179.0], [18.3, 179.0], [18.4, 180.0], [18.5, 180.0], [18.6, 180.0], [18.7, 181.0], [18.8, 181.0], [18.9, 181.0], [19.0, 182.0], [19.1, 182.0], [19.2, 182.0], [19.3, 183.0], [19.4, 183.0], [19.5, 183.0], [19.6, 184.0], [19.7, 184.0], [19.8, 185.0], [19.9, 185.0], [20.0, 186.0], [20.1, 186.0], [20.2, 187.0], [20.3, 187.0], [20.4, 187.0], [20.5, 188.0], [20.6, 188.0], [20.7, 189.0], [20.8, 189.0], [20.9, 190.0], [21.0, 190.0], [21.1, 190.0], [21.2, 191.0], [21.3, 191.0], [21.4, 192.0], [21.5, 193.0], [21.6, 193.0], [21.7, 193.0], [21.8, 193.0], [21.9, 194.0], [22.0, 194.0], [22.1, 195.0], [22.2, 195.0], [22.3, 196.0], [22.4, 196.0], [22.5, 196.0], [22.6, 197.0], [22.7, 197.0], [22.8, 197.0], [22.9, 198.0], [23.0, 198.0], [23.1, 199.0], [23.2, 199.0], [23.3, 200.0], [23.4, 200.0], [23.5, 200.0], [23.6, 201.0], [23.7, 201.0], [23.8, 202.0], [23.9, 202.0], [24.0, 203.0], [24.1, 203.0], [24.2, 204.0], [24.3, 204.0], [24.4, 205.0], [24.5, 205.0], [24.6, 206.0], [24.7, 206.0], [24.8, 207.0], [24.9, 207.0], [25.0, 207.0], [25.1, 208.0], [25.2, 208.0], [25.3, 208.0], [25.4, 209.0], [25.5, 209.0], [25.6, 209.0], [25.7, 210.0], [25.8, 210.0], [25.9, 211.0], [26.0, 211.0], [26.1, 212.0], [26.2, 212.0], [26.3, 213.0], [26.4, 213.0], [26.5, 214.0], [26.6, 214.0], [26.7, 215.0], [26.8, 215.0], [26.9, 215.0], [27.0, 216.0], [27.1, 217.0], [27.2, 217.0], [27.3, 218.0], [27.4, 218.0], [27.5, 219.0], [27.6, 219.0], [27.7, 220.0], [27.8, 220.0], [27.9, 221.0], [28.0, 221.0], [28.1, 222.0], [28.2, 223.0], [28.3, 223.0], [28.4, 224.0], [28.5, 225.0], [28.6, 225.0], [28.7, 226.0], [28.8, 226.0], [28.9, 226.0], [29.0, 227.0], [29.1, 227.0], [29.2, 228.0], [29.3, 228.0], [29.4, 229.0], [29.5, 230.0], [29.6, 230.0], [29.7, 231.0], [29.8, 232.0], [29.9, 232.0], [30.0, 233.0], [30.1, 233.0], [30.2, 234.0], [30.3, 234.0], [30.4, 235.0], [30.5, 235.0], [30.6, 236.0], [30.7, 236.0], [30.8, 237.0], [30.9, 238.0], [31.0, 238.0], [31.1, 239.0], [31.2, 239.0], [31.3, 240.0], [31.4, 240.0], [31.5, 241.0], [31.6, 241.0], [31.7, 242.0], [31.8, 243.0], [31.9, 243.0], [32.0, 244.0], [32.1, 244.0], [32.2, 245.0], [32.3, 246.0], [32.4, 246.0], [32.5, 246.0], [32.6, 247.0], [32.7, 248.0], [32.8, 248.0], [32.9, 249.0], [33.0, 250.0], [33.1, 251.0], [33.2, 251.0], [33.3, 252.0], [33.4, 252.0], [33.5, 253.0], [33.6, 253.0], [33.7, 254.0], [33.8, 254.0], [33.9, 255.0], [34.0, 256.0], [34.1, 256.0], [34.2, 257.0], [34.3, 258.0], [34.4, 258.0], [34.5, 259.0], [34.6, 260.0], [34.7, 260.0], [34.8, 261.0], [34.9, 261.0], [35.0, 262.0], [35.1, 262.0], [35.2, 263.0], [35.3, 264.0], [35.4, 264.0], [35.5, 265.0], [35.6, 265.0], [35.7, 266.0], [35.8, 267.0], [35.9, 268.0], [36.0, 269.0], [36.1, 269.0], [36.2, 270.0], [36.3, 271.0], [36.4, 272.0], [36.5, 272.0], [36.6, 273.0], [36.7, 273.0], [36.8, 274.0], [36.9, 275.0], [37.0, 276.0], [37.1, 276.0], [37.2, 277.0], [37.3, 278.0], [37.4, 278.0], [37.5, 279.0], [37.6, 280.0], [37.7, 281.0], [37.8, 282.0], [37.9, 283.0], [38.0, 285.0], [38.1, 285.0], [38.2, 287.0], [38.3, 288.0], [38.4, 288.0], [38.5, 289.0], [38.6, 290.0], [38.7, 292.0], [38.8, 292.0], [38.9, 294.0], [39.0, 295.0], [39.1, 296.0], [39.2, 298.0], [39.3, 300.0], [39.4, 302.0], [39.5, 304.0], [39.6, 305.0], [39.7, 307.0], [39.8, 309.0], [39.9, 310.0], [40.0, 311.0], [40.1, 313.0], [40.2, 314.0], [40.3, 315.0], [40.4, 317.0], [40.5, 318.0], [40.6, 319.0], [40.7, 320.0], [40.8, 321.0], [40.9, 322.0], [41.0, 322.0], [41.1, 323.0], [41.2, 324.0], [41.3, 325.0], [41.4, 325.0], [41.5, 326.0], [41.6, 327.0], [41.7, 328.0], [41.8, 329.0], [41.9, 329.0], [42.0, 330.0], [42.1, 330.0], [42.2, 331.0], [42.3, 332.0], [42.4, 332.0], [42.5, 333.0], [42.6, 334.0], [42.7, 335.0], [42.8, 335.0], [42.9, 336.0], [43.0, 337.0], [43.1, 337.0], [43.2, 338.0], [43.3, 339.0], [43.4, 340.0], [43.5, 341.0], [43.6, 341.0], [43.7, 342.0], [43.8, 343.0], [43.9, 344.0], [44.0, 345.0], [44.1, 345.0], [44.2, 346.0], [44.3, 347.0], [44.4, 347.0], [44.5, 348.0], [44.6, 349.0], [44.7, 350.0], [44.8, 351.0], [44.9, 351.0], [45.0, 352.0], [45.1, 353.0], [45.2, 353.0], [45.3, 354.0], [45.4, 355.0], [45.5, 356.0], [45.6, 357.0], [45.7, 358.0], [45.8, 358.0], [45.9, 359.0], [46.0, 360.0], [46.1, 361.0], [46.2, 362.0], [46.3, 363.0], [46.4, 363.0], [46.5, 364.0], [46.6, 365.0], [46.7, 366.0], [46.8, 366.0], [46.9, 367.0], [47.0, 368.0], [47.1, 369.0], [47.2, 369.0], [47.3, 370.0], [47.4, 371.0], [47.5, 372.0], [47.6, 373.0], [47.7, 373.0], [47.8, 374.0], [47.9, 375.0], [48.0, 375.0], [48.1, 377.0], [48.2, 378.0], [48.3, 378.0], [48.4, 379.0], [48.5, 380.0], [48.6, 381.0], [48.7, 381.0], [48.8, 383.0], [48.9, 384.0], [49.0, 385.0], [49.1, 386.0], [49.2, 387.0], [49.3, 388.0], [49.4, 389.0], [49.5, 390.0], [49.6, 391.0], [49.7, 392.0], [49.8, 393.0], [49.9, 395.0], [50.0, 396.0], [50.1, 397.0], [50.2, 397.0], [50.3, 398.0], [50.4, 399.0], [50.5, 400.0], [50.6, 401.0], [50.7, 402.0], [50.8, 403.0], [50.9, 404.0], [51.0, 405.0], [51.1, 405.0], [51.2, 407.0], [51.3, 408.0], [51.4, 409.0], [51.5, 410.0], [51.6, 412.0], [51.7, 414.0], [51.8, 415.0], [51.9, 416.0], [52.0, 419.0], [52.1, 421.0], [52.2, 422.0], [52.3, 424.0], [52.4, 427.0], [52.5, 430.0], [52.6, 433.0], [52.7, 437.0], [52.8, 441.0], [52.9, 443.0], [53.0, 447.0], [53.1, 450.0], [53.2, 460.0], [53.3, 466.0], [53.4, 468.0], [53.5, 473.0], [53.6, 481.0], [53.7, 493.0], [53.8, 495.0], [53.9, 497.0], [54.0, 498.0], [54.1, 503.0], [54.2, 511.0], [54.3, 512.0], [54.4, 512.0], [54.5, 513.0], [54.6, 514.0], [54.7, 515.0], [54.8, 520.0], [54.9, 525.0], [55.0, 531.0], [55.1, 538.0], [55.2, 548.0], [55.3, 557.0], [55.4, 565.0], [55.5, 573.0], [55.6, 584.0], [55.7, 588.0], [55.8, 590.0], [55.9, 596.0], [56.0, 603.0], [56.1, 610.0], [56.2, 618.0], [56.3, 622.0], [56.4, 629.0], [56.5, 637.0], [56.6, 638.0], [56.7, 638.0], [56.8, 643.0], [56.9, 646.0], [57.0, 650.0], [57.1, 651.0], [57.2, 652.0], [57.3, 653.0], [57.4, 655.0], [57.5, 658.0], [57.6, 661.0], [57.7, 664.0], [57.8, 666.0], [57.9, 672.0], [58.0, 679.0], [58.1, 684.0], [58.2, 684.0], [58.3, 685.0], [58.4, 685.0], [58.5, 685.0], [58.6, 685.0], [58.7, 686.0], [58.8, 686.0], [58.9, 686.0], [59.0, 687.0], [59.1, 687.0], [59.2, 688.0], [59.3, 688.0], [59.4, 690.0], [59.5, 692.0], [59.6, 699.0], [59.7, 702.0], [59.8, 703.0], [59.9, 710.0], [60.0, 715.0], [60.1, 716.0], [60.2, 717.0], [60.3, 717.0], [60.4, 718.0], [60.5, 720.0], [60.6, 722.0], [60.7, 725.0], [60.8, 727.0], [60.9, 730.0], [61.0, 732.0], [61.1, 734.0], [61.2, 738.0], [61.3, 740.0], [61.4, 744.0], [61.5, 748.0], [61.6, 749.0], [61.7, 750.0], [61.8, 750.0], [61.9, 751.0], [62.0, 752.0], [62.1, 753.0], [62.2, 755.0], [62.3, 755.0], [62.4, 756.0], [62.5, 757.0], [62.6, 758.0], [62.7, 759.0], [62.8, 761.0], [62.9, 763.0], [63.0, 765.0], [63.1, 767.0], [63.2, 769.0], [63.3, 772.0], [63.4, 777.0], [63.5, 781.0], [63.6, 785.0], [63.7, 787.0], [63.8, 791.0], [63.9, 794.0], [64.0, 799.0], [64.1, 802.0], [64.2, 806.0], [64.3, 809.0], [64.4, 812.0], [64.5, 817.0], [64.6, 819.0], [64.7, 821.0], [64.8, 825.0], [64.9, 828.0], [65.0, 833.0], [65.1, 838.0], [65.2, 843.0], [65.3, 848.0], [65.4, 851.0], [65.5, 854.0], [65.6, 856.0], [65.7, 860.0], [65.8, 864.0], [65.9, 868.0], [66.0, 873.0], [66.1, 875.0], [66.2, 878.0], [66.3, 883.0], [66.4, 887.0], [66.5, 890.0], [66.6, 895.0], [66.7, 899.0], [66.8, 904.0], [66.9, 908.0], [67.0, 913.0], [67.1, 918.0], [67.2, 922.0], [67.3, 926.0], [67.4, 931.0], [67.5, 935.0], [67.6, 939.0], [67.7, 943.0], [67.8, 947.0], [67.9, 951.0], [68.0, 956.0], [68.1, 960.0], [68.2, 964.0], [68.3, 969.0], [68.4, 974.0], [68.5, 979.0], [68.6, 984.0], [68.7, 989.0], [68.8, 992.0], [68.9, 994.0], [69.0, 998.0], [69.1, 1003.0], [69.2, 1008.0], [69.3, 1013.0], [69.4, 1018.0], [69.5, 1022.0], [69.6, 1027.0], [69.7, 1029.0], [69.8, 1032.0], [69.9, 1036.0], [70.0, 1040.0], [70.1, 1044.0], [70.2, 1047.0], [70.3, 1050.0], [70.4, 1055.0], [70.5, 1057.0], [70.6, 1063.0], [70.7, 1067.0], [70.8, 1072.0], [70.9, 1075.0], [71.0, 1079.0], [71.1, 1083.0], [71.2, 1087.0], [71.3, 1088.0], [71.4, 1089.0], [71.5, 1089.0], [71.6, 1089.0], [71.7, 1089.0], [71.8, 1089.0], [71.9, 1089.0], [72.0, 1090.0], [72.1, 1090.0], [72.2, 1090.0], [72.3, 1090.0], [72.4, 1091.0], [72.5, 1091.0], [72.6, 1091.0], [72.7, 1092.0], [72.8, 1092.0], [72.9, 1093.0], [73.0, 1093.0], [73.1, 1093.0], [73.2, 1094.0], [73.3, 1094.0], [73.4, 1095.0], [73.5, 1096.0], [73.6, 1097.0], [73.7, 1098.0], [73.8, 1100.0], [73.9, 1101.0], [74.0, 1103.0], [74.1, 1112.0], [74.2, 1118.0], [74.3, 1123.0], [74.4, 1123.0], [74.5, 1124.0], [74.6, 1124.0], [74.7, 1124.0], [74.8, 1124.0], [74.9, 1125.0], [75.0, 1126.0], [75.1, 1128.0], [75.2, 1128.0], [75.3, 1132.0], [75.4, 1137.0], [75.5, 1138.0], [75.6, 1138.0], [75.7, 1139.0], [75.8, 1139.0], [75.9, 1140.0], [76.0, 1142.0], [76.1, 1144.0], [76.2, 1145.0], [76.3, 1145.0], [76.4, 1146.0], [76.5, 1146.0], [76.6, 1147.0], [76.7, 1148.0], [76.8, 1148.0], [76.9, 1149.0], [77.0, 1150.0], [77.1, 1151.0], [77.2, 1154.0], [77.3, 1178.0], [77.4, 1233.0], [77.5, 1251.0], [77.6, 1263.0], [77.7, 1330.0], [77.8, 1336.0], [77.9, 1339.0], [78.0, 1385.0], [78.1, 1416.0], [78.2, 1451.0], [78.3, 1546.0], [78.4, 1558.0], [78.5, 1572.0], [78.6, 1582.0], [78.7, 1607.0], [78.8, 1654.0], [78.9, 1708.0], [79.0, 1742.0], [79.1, 1747.0], [79.2, 1751.0], [79.3, 1785.0], [79.4, 1791.0], [79.5, 1796.0], [79.6, 1801.0], [79.7, 1818.0], [79.8, 1832.0], [79.9, 1848.0], [80.0, 1873.0], [80.1, 1875.0], [80.2, 1883.0], [80.3, 1908.0], [80.4, 1910.0], [80.5, 1914.0], [80.6, 1936.0], [80.7, 1939.0], [80.8, 1944.0], [80.9, 1962.0], [81.0, 2446.0], [81.1, 2450.0], [81.2, 2456.0], [81.3, 2502.0], [81.4, 2507.0], [81.5, 2579.0], [81.6, 2661.0], [81.7, 2745.0], [81.8, 2746.0], [81.9, 2746.0], [82.0, 2778.0], [82.1, 2917.0], [82.2, 2921.0], [82.3, 2971.0], [82.4, 3076.0], [82.5, 3149.0], [82.6, 3153.0], [82.7, 3156.0], [82.8, 3160.0], [82.9, 3179.0], [83.0, 3181.0], [83.1, 3184.0], [83.2, 3190.0], [83.3, 3239.0], [83.4, 3243.0], [83.5, 3255.0], [83.6, 3324.0], [83.7, 3329.0], [83.8, 3332.0], [83.9, 3333.0], [84.0, 3335.0], [84.1, 3336.0], [84.2, 3337.0], [84.3, 3338.0], [84.4, 3340.0], [84.5, 3340.0], [84.6, 3342.0], [84.7, 3345.0], [84.8, 3473.0], [84.9, 3610.0], [85.0, 3624.0], [85.1, 3634.0], [85.2, 3635.0], [85.3, 3654.0], [85.4, 3661.0], [85.5, 3713.0], [85.6, 3715.0], [85.7, 3719.0], [85.8, 4320.0], [85.9, 4322.0], [86.0, 4326.0], [86.1, 4353.0], [86.2, 4354.0], [86.3, 4355.0], [86.4, 4356.0], [86.5, 4360.0], [86.6, 4375.0], [86.7, 4376.0], [86.8, 4377.0], [86.9, 4378.0], [87.0, 4379.0], [87.1, 4379.0], [87.2, 4380.0], [87.3, 4380.0], [87.4, 4381.0], [87.5, 4384.0], [87.6, 4386.0], [87.7, 4387.0], [87.8, 4389.0], [87.9, 4392.0], [88.0, 4395.0], [88.1, 4398.0], [88.2, 4401.0], [88.3, 4402.0], [88.4, 4403.0], [88.5, 4405.0], [88.6, 4415.0], [88.7, 4440.0], [88.8, 4446.0], [88.9, 4453.0], [89.0, 4459.0], [89.1, 4499.0], [89.2, 4558.0], [89.3, 4609.0], [89.4, 4678.0], [89.5, 4704.0], [89.6, 4767.0], [89.7, 4780.0], [89.8, 4857.0], [89.9, 4936.0], [90.0, 4992.0], [90.1, 5049.0], [90.2, 5083.0], [90.3, 5160.0], [90.4, 5575.0], [90.5, 5578.0], [90.6, 5580.0], [90.7, 5581.0], [90.8, 5582.0], [90.9, 5583.0], [91.0, 5584.0], [91.1, 5586.0], [91.2, 5589.0], [91.3, 5592.0], [91.4, 5621.0], [91.5, 5623.0], [91.6, 5624.0], [91.7, 5625.0], [91.8, 5629.0], [91.9, 5631.0], [92.0, 5633.0], [92.1, 5635.0], [92.2, 5638.0], [92.3, 5643.0], [92.4, 5791.0], [92.5, 5894.0], [92.6, 6040.0], [92.7, 6136.0], [92.8, 6164.0], [92.9, 6169.0], [93.0, 6173.0], [93.1, 6175.0], [93.2, 6177.0], [93.3, 6196.0], [93.4, 6486.0], [93.5, 6496.0], [93.6, 6497.0], [93.7, 6500.0], [93.8, 6501.0], [93.9, 6511.0], [94.0, 6513.0], [94.1, 6516.0], [94.2, 6517.0], [94.3, 6521.0], [94.4, 6604.0], [94.5, 6604.0], [94.6, 6610.0], [94.7, 6612.0], [94.8, 6612.0], [94.9, 6617.0], [95.0, 6617.0], [95.1, 6618.0], [95.2, 6618.0], [95.3, 6618.0], [95.4, 6619.0], [95.5, 6619.0], [95.6, 6619.0], [95.7, 6619.0], [95.8, 6619.0], [95.9, 6620.0], [96.0, 6620.0], [96.1, 6620.0], [96.2, 6621.0], [96.3, 6621.0], [96.4, 6622.0], [96.5, 6623.0], [96.6, 6623.0], [96.7, 6624.0], [96.8, 6624.0], [96.9, 6626.0], [97.0, 6628.0], [97.1, 6629.0], [97.2, 6644.0], [97.3, 6701.0], [97.4, 6852.0], [97.5, 6900.0], [97.6, 7080.0], [97.7, 7217.0], [97.8, 7221.0], [97.9, 7238.0], [98.0, 7558.0], [98.1, 7660.0], [98.2, 7714.0], [98.3, 8624.0], [98.4, 8683.0], [98.5, 8683.0], [98.6, 8687.0], [98.7, 8687.0], [98.8, 8688.0], [98.9, 8704.0], [99.0, 8715.0], [99.1, 9039.0], [99.2, 9054.0], [99.3, 9061.0], [99.4, 9280.0], [99.5, 9285.0], [99.6, 9290.0], [99.7, 9529.0], [99.8, 9533.0], [99.9, 9538.0]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2537.0, "series": [{"data": [[0.0, 260.0], [600.0, 438.0], [700.0, 530.0], [800.0, 325.0], [900.0, 277.0], [1000.0, 571.0], [1100.0, 424.0], [1200.0, 43.0], [1300.0, 46.0], [1400.0, 23.0], [1500.0, 54.0], [1600.0, 23.0], [1700.0, 82.0], [1800.0, 83.0], [1900.0, 78.0], [2000.0, 6.0], [2100.0, 2.0], [2400.0, 33.0], [2500.0, 40.0], [2600.0, 5.0], [2700.0, 46.0], [2800.0, 1.0], [2900.0, 38.0], [3000.0, 12.0], [3100.0, 93.0], [3200.0, 46.0], [3300.0, 144.0], [3400.0, 4.0], [3700.0, 36.0], [3600.0, 74.0], [4000.0, 3.0], [4200.0, 1.0], [4300.0, 283.0], [4500.0, 21.0], [4400.0, 119.0], [4600.0, 18.0], [4800.0, 15.0], [4700.0, 39.0], [4900.0, 19.0], [5000.0, 25.0], [5100.0, 8.0], [5300.0, 1.0], [5500.0, 118.0], [5400.0, 3.0], [5600.0, 122.0], [5800.0, 17.0], [5700.0, 10.0], [6100.0, 77.0], [6000.0, 9.0], [5900.0, 2.0], [6300.0, 4.0], [6200.0, 2.0], [6400.0, 37.0], [6500.0, 86.0], [6600.0, 351.0], [6800.0, 13.0], [6700.0, 10.0], [6900.0, 10.0], [7000.0, 6.0], [7100.0, 2.0], [7200.0, 36.0], [7400.0, 1.0], [7300.0, 1.0], [7500.0, 6.0], [7600.0, 21.0], [7700.0, 9.0], [8400.0, 1.0], [8500.0, 2.0], [8600.0, 66.0], [8700.0, 20.0], [8300.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9000.0, 43.0], [9100.0, 1.0], [9200.0, 32.0], [9300.0, 4.0], [9500.0, 37.0], [10300.0, 1.0], [100.0, 2537.0], [200.0, 1924.0], [300.0, 1339.0], [400.0, 439.0], [500.0, 227.0]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 11878.0, "series": [{"data": [[0.0, 134.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11878.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 196.75792333232727, "minX": 1.7305908E12, "maxY": 233.82630672027526, "series": [{"data": [[1.7305908E12, 233.82630672027526], [1.73059086E12, 196.75792333232727]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73059086E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 9540.0, "series": [{"data": [[9.0, 230.33333333333334], [10.0, 23.0], [11.0, 133.0], [12.0, 57.66666666666667], [13.0, 75.0], [14.0, 141.66666666666666], [15.0, 80.2], [16.0, 57.0], [17.0, 132.0], [18.0, 123.16666666666667], [19.0, 42.333333333333336], [20.0, 114.0], [21.0, 239.16666666666669], [23.0, 169.25], [24.0, 382.0], [25.0, 473.0], [26.0, 142.0], [27.0, 156.5], [29.0, 167.8], [30.0, 191.0], [31.0, 193.0], [32.0, 151.25], [33.0, 134.16666666666666], [35.0, 103.75], [36.0, 108.6], [37.0, 108.0], [38.0, 225.0], [39.0, 133.85714285714286], [40.0, 639.5], [41.0, 209.0], [42.0, 223.66666666666666], [44.0, 110.44444444444444], [45.0, 107.33333333333333], [47.0, 121.72727272727272], [48.0, 141.0], [50.0, 117.58333333333334], [51.0, 109.0], [53.0, 113.85714285714286], [54.0, 150.85714285714286], [55.0, 101.0], [56.0, 133.88888888888889], [57.0, 107.0], [59.0, 109.6], [60.0, 137.0], [61.0, 112.0], [62.0, 117.0], [63.0, 154.79999999999998], [65.0, 122.5], [66.0, 136.44444444444446], [67.0, 121.0], [68.0, 110.25], [69.0, 130.44444444444446], [71.0, 168.0625], [72.0, 111.0], [73.0, 112.0], [74.0, 158.21428571428572], [75.0, 110.16666666666667], [77.0, 153.58823529411765], [78.0, 130.375], [80.0, 119.22222222222221], [81.0, 115.3076923076923], [82.0, 178.0], [83.0, 147.3], [84.0, 115.44444444444444], [85.0, 121.5], [86.0, 119.73333333333332], [87.0, 117.00000000000001], [88.0, 125.0], [89.0, 117.1], [90.0, 160.0], [91.0, 819.0], [92.0, 226.36363636363635], [93.0, 170.54545454545456], [94.0, 124.5], [95.0, 140.00000000000003], [96.0, 132.83333333333334], [97.0, 253.6], [98.0, 131.5], [99.0, 144.92307692307693], [100.0, 177.0], [101.0, 149.5], [102.0, 120.33333333333333], [104.0, 294.2380952380952], [105.0, 275.7857142857143], [107.0, 136.46153846153848], [106.0, 809.0], [108.0, 134.75000000000003], [109.0, 108.0], [110.0, 153.76923076923077], [111.0, 220.1764705882353], [112.0, 356.0], [113.0, 130.27272727272728], [114.0, 131.84615384615387], [115.0, 514.6], [116.0, 162.75000000000003], [117.0, 132.08333333333331], [118.0, 119.0], [119.0, 162.1764705882353], [120.0, 234.64705882352942], [121.0, 269.75], [122.0, 176.93333333333334], [123.0, 133.70000000000002], [125.0, 181.9333333333333], [126.0, 204.05263157894737], [127.0, 117.0], [124.0, 726.0], [128.0, 183.21739130434784], [129.0, 120.75], [130.0, 133.5], [131.0, 206.83333333333334], [132.0, 147.39999999999998], [133.0, 431.75], [134.0, 142.15789473684208], [135.0, 178.40000000000003], [136.0, 330.8], [137.0, 128.55555555555557], [138.0, 134.27272727272728], [139.0, 427.5], [140.0, 221.46153846153845], [141.0, 139.70000000000005], [142.0, 625.3333333333334], [143.0, 184.47368421052633], [144.0, 143.75], [145.0, 134.4], [146.0, 139.65], [147.0, 141.16666666666666], [148.0, 429.0], [149.0, 258.7407407407407], [150.0, 179.0], [151.0, 135.14285714285717], [152.0, 177.10000000000002], [153.0, 139.0], [155.0, 148.04761904761904], [156.0, 150.50000000000003], [158.0, 142.3809523809524], [159.0, 141.69230769230768], [154.0, 716.0], [161.0, 172.0], [162.0, 217.2], [163.0, 156.2], [164.0, 256.38461538461536], [165.0, 156.875], [166.0, 294.5], [167.0, 157.18181818181822], [160.0, 716.6666666666666], [168.0, 292.2666666666667], [169.0, 574.25], [170.0, 150.83333333333331], [171.0, 189.64285714285714], [172.0, 436.0], [173.0, 217.92307692307693], [174.0, 161.99999999999994], [175.0, 715.5], [176.0, 195.39999999999998], [177.0, 203.85000000000002], [179.0, 233.94117647058823], [180.0, 160.69999999999996], [182.0, 154.73913043478262], [183.0, 246.66666666666669], [181.0, 717.5], [184.0, 308.5], [185.0, 194.68421052631584], [186.0, 217.18181818181816], [187.0, 213.46666666666664], [188.0, 193.15789473684208], [189.0, 201.85714285714286], [190.0, 279.2], [191.0, 175.31818181818178], [192.0, 169.9230769230769], [193.0, 329.8571428571429], [194.0, 216.92857142857142], [195.0, 247.11111111111111], [196.0, 293.2], [197.0, 294.37931034482756], [198.0, 275.625], [199.0, 599.7692307692306], [200.0, 673.0632946379206], [201.0, 167.58823529411762], [203.0, 191.71999999999997], [204.0, 155.3], [205.0, 153.5], [206.0, 166.6], [207.0, 165.8695652173913], [209.0, 163.22727272727275], [210.0, 173.56250000000003], [212.0, 165.28571428571428], [211.0, 157.2857142857143], [213.0, 190.1], [214.0, 207.0], [215.0, 186.43749999999997], [216.0, 175.5294117647059], [217.0, 170.5], [218.0, 195.2857142857143], [219.0, 192.5185185185185], [220.0, 183.5], [221.0, 187.5], [222.0, 212.66666666666666], [223.0, 202.5], [224.0, 184.93750000000003], [225.0, 201.2], [226.0, 205.62500000000003], [227.0, 197.0], [228.0, 204.7], [229.0, 204.15384615384613], [230.0, 198.76923076923077], [231.0, 201.58823529411765], [232.0, 203.33333333333334], [233.0, 187.36], [234.0, 205.70588235294122], [235.0, 191.66666666666666], [236.0, 195.3125], [237.0, 186.66666666666669], [238.0, 187.16666666666669], [239.0, 190.05], [240.0, 185.31578947368425], [242.0, 183.6153846153846], [241.0, 189.5], [243.0, 184.6818181818182], [245.0, 201.52], [246.0, 184.0], [247.0, 180.75], [248.0, 190.3684210526316], [249.0, 222.4], [250.0, 198.0], [251.0, 199.8571428571429], [252.0, 234.88235294117646], [253.0, 182.0], [254.0, 201.20000000000002], [255.0, 175.1538461538462], [257.0, 193.8235294117647], [256.0, 178.14285714285714], [258.0, 187.14814814814815], [259.0, 193.33333333333334], [260.0, 185.43749999999997], [261.0, 188.0], [262.0, 179.0], [263.0, 190.21874999999997], [264.0, 196.375], [269.0, 210.18518518518513], [270.0, 213.16666666666669], [265.0, 193.44444444444446], [266.0, 192.41176470588235], [267.0, 230.75], [273.0, 254.2307692307692], [272.0, 220.2], [274.0, 246.0], [275.0, 244.3846153846154], [276.0, 251.21052631578948], [278.0, 347.72], [279.0, 247.62499999999997], [281.0, 281.1], [284.0, 256.29999999999995], [285.0, 262.92307692307696], [287.0, 296.6111111111111], [286.0, 264.0], [282.0, 258.4166666666667], [289.0, 249.5], [288.0, 306.61904761904765], [290.0, 236.4782608695652], [291.0, 245.16666666666669], [292.0, 270.0], [293.0, 261.47058823529414], [294.0, 232.33333333333331], [295.0, 223.5], [296.0, 432.84615384615387], [303.0, 226.7857142857143], [300.0, 209.33333333333334], [301.0, 201.5], [302.0, 228.20000000000002], [297.0, 269.64285714285717], [298.0, 247.2], [299.0, 248.58823529411765], [305.0, 199.16666666666666], [304.0, 198.75], [306.0, 219.375], [307.0, 219.71428571428572], [308.0, 248.8947368421053], [309.0, 241.76470588235293], [310.0, 219.83333333333334], [311.0, 243.66666666666663], [312.0, 271.88235294117646], [318.0, 231.45454545454544], [319.0, 330.0], [317.0, 232.16666666666669], [316.0, 223.0], [314.0, 303.3333333333333], [315.0, 269.764705882353], [321.0, 220.27272727272722], [320.0, 214.22857142857143], [323.0, 229.28571428571428], [332.0, 201.79999999999998], [333.0, 206.89999999999998], [335.0, 245.39999999999998], [324.0, 215.52000000000004], [326.0, 272.83333333333337], [327.0, 208.4375], [328.0, 247.5], [329.0, 242.51612903225805], [330.0, 212.4], [337.0, 227.33333333333334], [336.0, 277.0769230769231], [338.0, 249.2], [339.0, 364.66666666666663], [340.0, 351.2], [341.0, 356.62500000000006], [342.0, 272.96551724137925], [343.0, 241.57142857142856], [344.0, 253.1875], [350.0, 240.13636363636365], [351.0, 254.31578947368422], [348.0, 244.38095238095238], [349.0, 237.5], [345.0, 236.04545454545453], [347.0, 238.5], [353.0, 240.7222222222222], [352.0, 258.5], [354.0, 248.63157894736844], [355.0, 252.0], [356.0, 274.00000000000006], [357.0, 272.8421052631578], [358.0, 271.0], [359.0, 377.6285714285714], [360.0, 290.81481481481484], [366.0, 313.72727272727275], [367.0, 295.0], [364.0, 533.0], [365.0, 303.89473684210526], [362.0, 226.0], [363.0, 475.2727272727273], [361.0, 225.0], [369.0, 285.2631578947368], [368.0, 291.6060606060606], [370.0, 245.0], [371.0, 298.9047619047619], [372.0, 261.5], [373.0, 241.0], [374.0, 306.50000000000006], [375.0, 266.61904761904765], [377.0, 294.42857142857144], [378.0, 307.7083333333333], [379.0, 269.4], [376.0, 275.85714285714283], [383.0, 272.9], [380.0, 293.6153846153846], [381.0, 285.49999999999994], [385.0, 331.5], [384.0, 297.1333333333333], [386.0, 318.875], [387.0, 364.32142857142856], [389.0, 342.36], [390.0, 310.8333333333333], [392.0, 348.30000000000007], [399.0, 378.2916666666665], [396.0, 385.38461538461536], [398.0, 375.16], [391.0, 360.0], [393.0, 343.0], [395.0, 386.10526315789474], [413.0, 394.54545454545456], [401.0, 398.7222222222222], [402.0, 411.7142857142857], [404.0, 417.57894736842104], [405.0, 417.4285714285714], [407.0, 395.54545454545456], [408.0, 387.5454545454546], [410.0, 399.2142857142858], [411.0, 401.3103448275862], [414.0, 407.58333333333337], [415.0, 374.3333333333333], [417.0, 367.34999999999997], [416.0, 377.63157894736844], [418.0, 366.2], [419.0, 387.6666666666667], [420.0, 373.0], [422.0, 370.04761904761904], [421.0, 365.0], [423.0, 385.22222222222223], [424.0, 363.0], [431.0, 366.4285714285715], [428.0, 337.33333333333326], [429.0, 321.3666666666667], [425.0, 327.58333333333337], [426.0, 353.04999999999995], [427.0, 356.0], [435.0, 362.0], [433.0, 330.0], [432.0, 335.64285714285717], [434.0, 341.57142857142856], [437.0, 406.1034482758621], [438.0, 352.9642857142856], [440.0, 342.3333333333333], [446.0, 489.2000000000001], [447.0, 439.3846153846154], [444.0, 437.8695652173913], [445.0, 375.0], [441.0, 402.54545454545445], [443.0, 394.75], [449.0, 457.0], [448.0, 455.8], [450.0, 420.28947368421046], [451.0, 401.3333333333333], [452.0, 427.38888888888897], [453.0, 406.1666666666667], [455.0, 373.17391304347825], [456.0, 359.38888888888897], [462.0, 359.4], [463.0, 356.6666666666667], [460.0, 344.5], [461.0, 346.96551724137925], [457.0, 353.3333333333333], [458.0, 346.84615384615387], [459.0, 364.75], [465.0, 336.75], [464.0, 344.47222222222223], [466.0, 355.2857142857143], [467.0, 343.5], [468.0, 354.6666666666666], [470.0, 344.44444444444446], [471.0, 372.7222222222222], [472.0, 348.6666666666667], [478.0, 367.33333333333337], [479.0, 323.11428571428564], [476.0, 353.1904761904762], [477.0, 322.2380952380953], [473.0, 365.17857142857144], [474.0, 357.125], [475.0, 343.4], [481.0, 493.0], [480.0, 370.5769230769231], [482.0, 272.66666666666663], [483.0, 232.3], [484.0, 228.0], [485.0, 203.3888888888889], [486.0, 212.1], [487.0, 247.0], [488.0, 201.0], [489.0, 1130.0], [497.0, 1129.6666666666667], [519.0, 1179.0], [517.0, 1121.0], [516.0, 1108.0], [518.0, 1154.0], [522.0, 1261.0], [525.0, 1376.5], [530.0, 1483.0], [542.0, 1743.0], [543.0, 1789.5], [539.0, 1708.0], [540.0, 1744.75], [536.0, 1640.5], [537.0, 1683.6666666666667], [533.0, 1572.0], [534.0, 1607.0], [546.0, 1795.25], [545.0, 1792.25], [557.0, 1201.2105263157898], [558.0, 756.490909090909], [555.0, 1879.6666666666667], [556.0, 1879.0], [547.0, 1801.0], [548.0, 1801.0], [549.0, 1797.3333333333333], [550.0, 1801.0], [551.0, 1816.0], [575.0, 1542.8333333333335], [552.0, 1868.0], [554.0, 1882.8], [582.0, 1346.375], [637.0, 1706.0], [757.0, 2507.0], [793.0, 1949.0], [796.0, 1961.0], [795.0, 1667.5], [794.0, 22.0], [792.0, 1950.0], [775.0, 45.5], [786.0, 1947.0], [783.0, 865.0], [781.0, 862.0], [780.0, 876.0], [779.0, 874.0], [778.0, 876.0], [776.0, 879.5], [828.0, 6900.0], [804.0, 2704.0], [815.0, 1946.0], [800.0, 1599.3333333333333], [808.0, 2455.0], [831.0, 485.0], [816.0, 5635.0], [830.0, 6903.0], [829.0, 478.0], [827.0, 485.0], [826.0, 5636.0], [825.0, 2295.2], [807.0, 1754.6666666666667], [805.0, 1946.0], [822.0, 41.0], [821.0, 5635.0], [861.0, 3068.0], [850.0, 2994.0], [853.0, 3013.0], [863.0, 4780.0], [860.0, 6898.0], [859.0, 4780.0], [852.0, 4782.0], [848.0, 4712.0], [843.0, 6906.5], [839.0, 3048.0], [837.0, 2455.0], [836.0, 613.3333333333334], [834.0, 1468.0], [842.0, 6905.0], [876.0, 3159.0], [865.0, 3089.0], [873.0, 3141.0], [874.0, 3150.0], [875.0, 3155.0], [879.0, 3183.0], [864.0, 4778.0], [878.0, 6897.0], [882.0, 3201.0], [881.0, 5634.0], [880.0, 6897.0], [883.0, 5634.0], [895.0, 5635.0], [894.0, 5635.0], [893.0, 5635.0], [889.0, 3250.0], [871.0, 6898.0], [867.0, 4780.0], [891.0, 3261.0], [884.0, 5055.5], [887.0, 3233.0], [886.0, 6902.5], [898.0, 3305.0], [897.0, 3299.0], [900.0, 3313.0], [901.0, 3325.0], [903.0, 4484.0], [922.0, 4784.0], [920.0, 5630.0], [925.0, 3691.0], [923.0, 4344.666666666667], [907.0, 3340.8], [910.0, 3370.8059701492534], [911.0, 3300.6170212765965], [912.0, 1821.3313953488387], [918.0, 5632.0], [927.0, 2572.5], [951.0, 4774.0], [943.0, 3614.0], [941.0, 4777.0], [939.0, 4778.0], [938.0, 4778.0], [936.0, 2448.0], [933.0, 3613.0], [932.0, 2454.0], [986.0, 2450.0], [988.0, 1943.0], [985.0, 1943.0], [981.0, 2461.3333333333335], [980.0, 2449.0], [977.0, 2450.0], [967.0, 2451.0], [963.0, 2452.0], [962.0, 2451.0], [1022.0, 1940.0], [1017.0, 1941.0], [1007.0, 1938.0], [1006.0, 1939.0], [1004.0, 1940.0], [1002.0, 1939.0], [1001.0, 1940.0], [994.0, 1942.0], [1086.0, 1936.0], [1066.0, 1937.0], [1058.0, 856.0], [1056.0, 853.0], [1050.0, 854.0], [1044.0, 5630.0], [1042.0, 857.0], [1038.0, 1397.0], [1132.0, 1939.0], [1112.0, 1939.0], [1108.0, 4704.0], [1106.0, 1937.0], [1100.0, 5632.0], [1194.0, 3473.0], [1214.0, 2447.0], [1192.0, 2446.0], [1178.0, 2446.0], [1164.0, 2446.0], [1252.0, 6889.0], [1316.0, 5626.0], [1312.0, 5625.0], [1286.0, 4700.0], [1406.0, 5623.0], [1370.0, 4774.0], [1366.0, 4701.0], [1364.0, 4700.0], [1358.0, 4701.0], [1414.0, 4986.0], [1418.0, 5066.0], [1432.0, 4543.75], [1428.0, 4956.999999999998], [1430.0, 4496.888888888888], [1426.0, 5241.666666666667], [1420.0, 5079.75], [1422.0, 5303.333333333333], [1444.0, 5624.0], [1424.0, 5138.0], [1504.0, 3595.6666666666665], [1478.0, 4379.0], [1508.0, 3767.5], [1510.0, 3791.0], [1490.0, 4377.5], [1498.0, 2261.1111111111113], [1500.0, 3837.5510204081634], [1502.0, 3000.363636363636], [1550.0, 4673.0], [1548.0, 2576.4864864864867], [1566.0, 1531.0], [1538.0, 3658.0], [1542.0, 5631.0], [1540.0, 3658.0], [1564.0, 4268.6], [1560.0, 3457.6666666666665], [1558.0, 5639.0], [1556.0, 3658.0], [1584.0, 3391.0], [1588.0, 5642.5], [1586.0, 3608.0], [1554.0, 2824.0000000000005], [1552.0, 4680.5], [1568.0, 3714.0], [1572.0, 3617.0], [1570.0, 3715.0], [1574.0, 5628.0], [1578.0, 4642.0], [1580.0, 3713.0], [1582.0, 4325.0], [1598.0, 3610.0], [1592.0, 3715.0], [1590.0, 4674.5], [1648.0, 5838.0], [1654.0, 6242.624999999998], [1646.0, 6681.75], [1644.0, 4968.0], [1642.0, 5621.0], [1640.0, 5492.0], [1652.0, 9056.0], [1650.0, 6104.0], [1614.0, 3608.0], [1608.0, 3610.0], [1606.0, 4870.0], [1604.0, 3612.0], [1600.0, 4619.5], [1630.0, 9138.0], [1628.0, 4041.830882352942], [1624.0, 9510.0], [1618.0, 3615.0], [1626.0, 9529.0], [1634.0, 7413.333333333333], [1632.0, 9060.65625], [1662.0, 5813.0], [1660.0, 4445.0], [1658.0, 5639.0], [1664.0, 3332.12], [1716.0, 2072.0], [1672.0, 5043.5], [1670.0, 5038.75], [1674.0, 5235.333333333333], [1678.0, 5618.25], [1686.0, 7012.5], [1680.0, 5468.568181818182], [1690.0, 8515.0], [1668.0, 6184.0], [1666.0, 4446.0], [1696.0, 8647.166666666666], [1698.0, 5624.0], [1694.0, 8683.727272727274], [1782.0, 5581.0], [1790.0, 6487.0], [1762.0, 6423.5], [1764.0, 6780.0], [1766.0, 7053.0], [1788.0, 5580.333333333333], [1730.0, 9539.5], [1758.0, 6253.0], [1754.0, 6136.0], [1752.0, 5897.0], [1748.0, 5744.0], [1746.0, 5672.5], [1744.0, 5590.5], [1732.0, 9538.5], [1738.0, 9538.0], [1742.0, 9539.0], [1796.0, 5582.666666666667], [1812.0, 6375.0], [1808.0, 5582.0], [1814.0, 5590.0], [1820.0, 5886.666666666667], [1816.0, 5582.0], [1822.0, 5894.666666666667], [1794.0, 7080.0], [1800.0, 5580.0], [1804.0, 6641.882352941177], [1802.0, 5582.0], [1806.0, 6397.0], [1840.0, 6623.404255319148], [1842.0, 6617.660194174758], [1854.0, 5576.0], [1852.0, 6485.0], [1848.0, 5590.0], [1844.0, 5576.0], [1824.0, 6122.75], [1826.0, 5584.0], [1828.0, 6712.0], [1830.0, 6368.0], [1832.0, 6034.857142857142], [1834.0, 6625.3125], [1836.0, 5586.0], [1838.0, 5844.0], [1906.0, 5579.0], [1912.0, 5579.0], [1918.0, 8382.0], [1888.0, 6486.5], [1892.0, 5580.0], [1894.0, 6615.4], [1896.0, 5581.0], [1916.0, 5580.0], [1908.0, 5585.5], [1866.0, 5582.0], [1864.0, 6487.0], [1862.0, 5951.333333333333], [1860.0, 6069.0], [1886.0, 6138.0], [1882.0, 6160.0], [1880.0, 6127.2], [1878.0, 6527.0], [1874.0, 6369.0], [1872.0, 6486.5], [1920.0, 7701.0], [1079.0, 1936.0], [1085.0, 1942.0], [1077.0, 1936.0], [1075.0, 1936.0], [1067.0, 6899.0], [1061.0, 857.0], [1059.0, 2872.666666666667], [1057.0, 6908.0], [1055.0, 853.0], [1029.0, 1939.0], [1039.0, 1216.6666666666667], [1031.0, 5628.0], [1053.0, 854.5], [1051.0, 853.0], [1045.0, 852.5], [1041.0, 853.0], [1139.0, 1940.0], [1125.0, 1939.0], [1101.0, 1938.0], [1095.0, 1936.0], [1093.0, 1936.0], [1091.0, 1938.0], [1207.0, 2447.0], [1205.0, 2446.0], [1203.0, 2447.0], [1201.0, 2579.0], [1187.0, 2447.0], [1185.0, 2449.0], [1175.0, 2450.0], [1153.0, 2661.0], [1227.0, 2517.0], [1219.0, 2528.0], [1327.0, 4464.0], [1287.0, 4699.0], [1351.0, 4263.0], [1401.0, 5623.0], [1387.0, 6887.0], [1381.0, 5623.0], [1373.0, 4702.0], [1345.0, 4700.0], [1433.0, 5627.0], [1417.0, 5625.0], [1431.0, 4510.0], [1429.0, 4497.263736263735], [1427.0, 5072.0], [1419.0, 5037.0], [1421.0, 5207.4], [1423.0, 5361.5], [1447.0, 6852.0], [1425.0, 5032.0], [1485.0, 4377.0], [1497.0, 4051.2068965517246], [1505.0, 3407.886363636363], [1507.0, 2009.6666666666667], [1509.0, 3622.0], [1511.0, 2655.523952095807], [1489.0, 4374.0], [1491.0, 4375.0], [1501.0, 4213.0], [1503.0, 3494.3750000000005], [1551.0, 1648.0], [1593.0, 3662.5], [1565.0, 3656.0], [1567.0, 3624.0], [1547.0, 3662.0], [1543.0, 3661.0], [1563.0, 4647.5], [1559.0, 5639.0], [1557.0, 3709.0], [1549.0, 4677.0], [1587.0, 3660.0], [1589.0, 3609.0], [1555.0, 2468.1666666666665], [1599.0, 3609.0], [1569.0, 4440.0], [1571.0, 3669.0], [1575.0, 3713.0], [1573.0, 4194.0], [1581.0, 3712.0], [1577.0, 5636.0], [1583.0, 3662.5], [1597.0, 3609.0], [1591.0, 4867.2], [1653.0, 8753.0], [1645.0, 6535.0], [1637.0, 5032.0], [1639.0, 6175.0], [1647.0, 5540.5], [1651.0, 8791.241379310344], [1649.0, 6130.5], [1615.0, 4592.0], [1609.0, 3610.0], [1611.0, 4456.0], [1607.0, 3610.0], [1605.0, 5631.0], [1629.0, 5522.876288659795], [1627.0, 7575.5], [1621.0, 5625.666666666667], [1619.0, 4989.333333333333], [1617.0, 4456.0], [1631.0, 9213.0], [1635.0, 8247.666666666666], [1633.0, 4441.5], [1663.0, 5631.5], [1659.0, 6609.0], [1661.0, 6176.0], [1657.0, 5753.25], [1673.0, 6030.8], [1669.0, 7442.0], [1713.0, 5356.0], [1721.0, 2745.0], [1727.0, 9540.0], [1675.0, 4581.5], [1679.0, 4282.0], [1683.0, 5624.666666666667], [1689.0, 5623.0], [1687.0, 5621.5], [1693.0, 8690.090909090908], [1695.0, 8604.0], [1667.0, 5631.5], [1665.0, 5504.0], [1697.0, 7133.833333333334], [1705.0, 3481.909090909091], [1779.0, 6819.0], [1737.0, 9538.0], [1783.0, 6137.0], [1763.0, 6397.0], [1765.0, 6781.0], [1769.0, 7379.5], [1729.0, 8591.75], [1759.0, 7714.0], [1753.0, 5894.0], [1749.0, 5894.0], [1747.0, 5592.0], [1745.0, 5592.0], [1741.0, 4330.0], [1743.0, 6363.000000000001], [1799.0, 5580.2], [1805.0, 7192.935483870967], [1821.0, 6406.5555555555575], [1809.0, 5582.5], [1813.0, 5579.5], [1815.0, 6398.0], [1817.0, 6079.5], [1823.0, 6509.08333333333], [1793.0, 5579.0], [1797.0, 5582.0], [1801.0, 5581.5], [1807.0, 5581.0], [1841.0, 6617.1395348837195], [1855.0, 6073.5], [1851.0, 5959.0], [1847.0, 5584.0], [1845.0, 5581.25], [1825.0, 6124.0], [1827.0, 6701.0], [1829.0, 5816.0], [1831.0, 6174.25], [1833.0, 6571.533333333334], [1839.0, 6620.11111111111], [1837.0, 6204.2], [1835.0, 5575.0], [1915.0, 5587.0], [1889.0, 6538.0], [1891.0, 5579.5], [1893.0, 6052.5], [1897.0, 5577.0], [1895.0, 5584.5], [1911.0, 5579.0], [1907.0, 5580.0], [1905.0, 5580.333333333333], [1869.0, 5586.0], [1867.0, 5874.5], [1865.0, 5612.0], [1861.0, 5591.0], [1857.0, 5895.0], [1887.0, 6139.0], [1883.0, 5578.0], [1881.0, 5789.0], [1873.0, 6136.0], [1.0, 11.0]], "isOverall": false, "label": "Get Authorized User", "isController": false}, {"data": [[542.0577467132622, 1410.7800798801784]], "isOverall": false, "label": "Get Authorized User-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1920.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 617.5666666666667, "minX": 1.7305908E12, "maxY": 235501.95, "series": [{"data": [[1.7305908E12, 235501.95], [1.73059086E12, 131684.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7305908E12, 16804.816666666666], [1.73059086E12, 617.5666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73059086E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 667.0353154240886, "minX": 1.7305908E12, "maxY": 1693.8388282596197, "series": [{"data": [[1.7305908E12, 1693.8388282596197], [1.73059086E12, 667.0353154240886]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73059086E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23.4307274373679, "minX": 1.7305908E12, "maxY": 147.2090752441128, "series": [{"data": [[1.7305908E12, 147.2090752441128], [1.73059086E12, 23.4307274373679]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73059086E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 659.277693932989, "minX": 1.7305908E12, "maxY": 1624.5033888569749, "series": [{"data": [[1.7305908E12, 1624.5033888569749], [1.73059086E12, 659.277693932989]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73059086E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 122.0, "minX": 1.7305908E12, "maxY": 709.0, "series": [{"data": [[1.7305908E12, 275.0], [1.73059086E12, 709.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7305908E12, 122.0], [1.73059086E12, 124.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7305908E12, 193.0], [1.73059086E12, 472.70000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7305908E12, 275.0], [1.73059086E12, 708.8]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7305908E12, 155.0], [1.73059086E12, 333.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7305908E12, 254.84999999999974], [1.73059086E12, 515.8499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73059086E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 1.0, "maxY": 8708.5, "series": [{"data": [[133.0, 139.5], [34.0, 155.5], [296.0, 142.0], [378.0, 359.5], [193.0, 330.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[738.0, 4357.5], [49.0, 7217.0], [85.0, 228.0], [6.0, 6042.0], [103.0, 3708.0], [115.0, 6164.0], [133.0, 108.0], [137.0, 717.0], [172.0, 8708.5], [199.0, 114.0], [193.0, 721.0], [204.0, 2450.5], [203.0, 751.0], [223.0, 1118.0], [242.0, 687.0], [269.0, 127.0], [1.0, 3240.5], [262.0, 1024.5], [277.0, 767.0], [298.0, 4198.5], [296.0, 731.0], [315.0, 134.0], [313.0, 3089.0], [332.0, 386.0], [322.0, 845.0], [321.0, 813.5], [328.0, 798.5], [349.0, 156.0], [21.0, 1607.0], [360.0, 246.5], [352.0, 6620.0], [378.0, 197.0], [381.0, 190.0], [382.0, 286.0], [372.0, 364.5], [380.0, 5585.0], [375.0, 469.0], [399.0, 189.0], [424.0, 220.0], [428.0, 247.5], [438.0, 346.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 738.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 386.0, "series": [{"data": [[133.0, 139.5], [34.0, 155.0], [296.0, 142.0], [378.0, 359.5], [193.0, 330.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[738.0, 0.0], [49.0, 0.0], [85.0, 228.0], [6.0, 0.0], [103.0, 0.0], [115.0, 0.0], [133.0, 108.0], [137.0, 0.0], [172.0, 0.0], [199.0, 114.0], [193.0, 0.0], [204.0, 0.0], [203.0, 0.0], [223.0, 0.0], [242.0, 0.0], [269.0, 127.0], [1.0, 0.0], [262.0, 0.0], [277.0, 0.0], [298.0, 0.0], [296.0, 0.0], [315.0, 134.0], [313.0, 0.0], [332.0, 386.0], [322.0, 0.0], [321.0, 0.0], [328.0, 0.0], [349.0, 156.0], [21.0, 0.0], [360.0, 246.5], [352.0, 0.0], [378.0, 144.0], [381.0, 190.0], [382.0, 286.0], [372.0, 364.5], [380.0, 0.0], [375.0, 0.0], [399.0, 189.0], [424.0, 220.0], [428.0, 247.5], [438.0, 346.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 738.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 51.88333333333333, "minX": 1.7305908E12, "maxY": 148.41666666666666, "series": [{"data": [[1.7305908E12, 148.41666666666666], [1.73059086E12, 51.88333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73059086E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.7305908E12, "maxY": 87.31666666666666, "series": [{"data": [[1.7305908E12, 0.6666666666666666], [1.73059086E12, 1.6666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7305908E12, 87.31666666666666], [1.73059086E12, 1.5666666666666667]], "isOverall": false, "label": "429", "isController": false}, {"data": [[1.7305908E12, 57.1], [1.73059086E12, 51.983333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73059086E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.7305908E12, "maxY": 144.41666666666666, "series": [{"data": [[1.7305908E12, 144.41666666666666], [1.73059086E12, 53.55]], "isOverall": false, "label": "Get Authorized User-failure", "isController": false}, {"data": [[1.7305908E12, 0.6666666666666666], [1.73059086E12, 1.6666666666666667]], "isOverall": false, "label": "Get Authorized User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73059086E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.7305908E12, "maxY": 144.41666666666666, "series": [{"data": [[1.7305908E12, 0.6666666666666666], [1.73059086E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7305908E12, 144.41666666666666], [1.73059086E12, 53.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73059086E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

