/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 9565.0, "series": [{"data": [[0.0, 18.0], [0.1, 72.0], [0.2, 99.0], [0.3, 100.0], [0.4, 102.0], [0.5, 102.0], [0.6, 103.0], [0.7, 104.0], [0.8, 104.0], [0.9, 105.0], [1.0, 106.0], [1.1, 107.0], [1.2, 107.0], [1.3, 108.0], [1.4, 108.0], [1.5, 109.0], [1.6, 109.0], [1.7, 110.0], [1.8, 110.0], [1.9, 111.0], [2.0, 111.0], [2.1, 112.0], [2.2, 112.0], [2.3, 112.0], [2.4, 113.0], [2.5, 113.0], [2.6, 113.0], [2.7, 114.0], [2.8, 114.0], [2.9, 115.0], [3.0, 115.0], [3.1, 116.0], [3.2, 116.0], [3.3, 117.0], [3.4, 117.0], [3.5, 117.0], [3.6, 118.0], [3.7, 118.0], [3.8, 119.0], [3.9, 119.0], [4.0, 120.0], [4.1, 120.0], [4.2, 120.0], [4.3, 121.0], [4.4, 122.0], [4.5, 122.0], [4.6, 122.0], [4.7, 123.0], [4.8, 123.0], [4.9, 124.0], [5.0, 124.0], [5.1, 124.0], [5.2, 125.0], [5.3, 125.0], [5.4, 126.0], [5.5, 126.0], [5.6, 126.0], [5.7, 127.0], [5.8, 127.0], [5.9, 128.0], [6.0, 128.0], [6.1, 128.0], [6.2, 129.0], [6.3, 129.0], [6.4, 130.0], [6.5, 130.0], [6.6, 130.0], [6.7, 131.0], [6.8, 131.0], [6.9, 131.0], [7.0, 132.0], [7.1, 132.0], [7.2, 132.0], [7.3, 133.0], [7.4, 133.0], [7.5, 133.0], [7.6, 134.0], [7.7, 134.0], [7.8, 135.0], [7.9, 135.0], [8.0, 136.0], [8.1, 136.0], [8.2, 136.0], [8.3, 137.0], [8.4, 137.0], [8.5, 137.0], [8.6, 138.0], [8.7, 138.0], [8.8, 139.0], [8.9, 139.0], [9.0, 139.0], [9.1, 140.0], [9.2, 140.0], [9.3, 140.0], [9.4, 141.0], [9.5, 141.0], [9.6, 142.0], [9.7, 142.0], [9.8, 142.0], [9.9, 143.0], [10.0, 143.0], [10.1, 144.0], [10.2, 144.0], [10.3, 145.0], [10.4, 145.0], [10.5, 145.0], [10.6, 146.0], [10.7, 146.0], [10.8, 147.0], [10.9, 147.0], [11.0, 148.0], [11.1, 148.0], [11.2, 149.0], [11.3, 149.0], [11.4, 150.0], [11.5, 150.0], [11.6, 151.0], [11.7, 151.0], [11.8, 152.0], [11.9, 152.0], [12.0, 152.0], [12.1, 153.0], [12.2, 153.0], [12.3, 154.0], [12.4, 154.0], [12.5, 155.0], [12.6, 155.0], [12.7, 155.0], [12.8, 156.0], [12.9, 156.0], [13.0, 157.0], [13.1, 157.0], [13.2, 158.0], [13.3, 158.0], [13.4, 159.0], [13.5, 159.0], [13.6, 160.0], [13.7, 160.0], [13.8, 160.0], [13.9, 161.0], [14.0, 161.0], [14.1, 162.0], [14.2, 162.0], [14.3, 162.0], [14.4, 163.0], [14.5, 163.0], [14.6, 163.0], [14.7, 164.0], [14.8, 164.0], [14.9, 164.0], [15.0, 165.0], [15.1, 165.0], [15.2, 166.0], [15.3, 166.0], [15.4, 167.0], [15.5, 167.0], [15.6, 168.0], [15.7, 168.0], [15.8, 168.0], [15.9, 169.0], [16.0, 169.0], [16.1, 169.0], [16.2, 170.0], [16.3, 170.0], [16.4, 170.0], [16.5, 171.0], [16.6, 171.0], [16.7, 171.0], [16.8, 172.0], [16.9, 172.0], [17.0, 173.0], [17.1, 173.0], [17.2, 173.0], [17.3, 173.0], [17.4, 174.0], [17.5, 174.0], [17.6, 174.0], [17.7, 175.0], [17.8, 175.0], [17.9, 175.0], [18.0, 175.0], [18.1, 176.0], [18.2, 176.0], [18.3, 176.0], [18.4, 177.0], [18.5, 177.0], [18.6, 177.0], [18.7, 178.0], [18.8, 178.0], [18.9, 178.0], [19.0, 179.0], [19.1, 179.0], [19.2, 179.0], [19.3, 179.0], [19.4, 180.0], [19.5, 180.0], [19.6, 180.0], [19.7, 181.0], [19.8, 181.0], [19.9, 182.0], [20.0, 182.0], [20.1, 182.0], [20.2, 183.0], [20.3, 183.0], [20.4, 183.0], [20.5, 183.0], [20.6, 184.0], [20.7, 184.0], [20.8, 184.0], [20.9, 185.0], [21.0, 185.0], [21.1, 185.0], [21.2, 186.0], [21.3, 186.0], [21.4, 186.0], [21.5, 186.0], [21.6, 187.0], [21.7, 187.0], [21.8, 188.0], [21.9, 188.0], [22.0, 188.0], [22.1, 189.0], [22.2, 189.0], [22.3, 189.0], [22.4, 189.0], [22.5, 190.0], [22.6, 190.0], [22.7, 190.0], [22.8, 191.0], [22.9, 191.0], [23.0, 192.0], [23.1, 192.0], [23.2, 192.0], [23.3, 193.0], [23.4, 193.0], [23.5, 193.0], [23.6, 193.0], [23.7, 194.0], [23.8, 194.0], [23.9, 195.0], [24.0, 195.0], [24.1, 195.0], [24.2, 195.0], [24.3, 196.0], [24.4, 196.0], [24.5, 196.0], [24.6, 197.0], [24.7, 197.0], [24.8, 197.0], [24.9, 198.0], [25.0, 198.0], [25.1, 198.0], [25.2, 199.0], [25.3, 199.0], [25.4, 199.0], [25.5, 200.0], [25.6, 200.0], [25.7, 200.0], [25.8, 201.0], [25.9, 201.0], [26.0, 201.0], [26.1, 202.0], [26.2, 202.0], [26.3, 202.0], [26.4, 203.0], [26.5, 203.0], [26.6, 204.0], [26.7, 204.0], [26.8, 205.0], [26.9, 205.0], [27.0, 205.0], [27.1, 205.0], [27.2, 206.0], [27.3, 206.0], [27.4, 207.0], [27.5, 207.0], [27.6, 207.0], [27.7, 208.0], [27.8, 208.0], [27.9, 208.0], [28.0, 209.0], [28.1, 209.0], [28.2, 209.0], [28.3, 210.0], [28.4, 210.0], [28.5, 211.0], [28.6, 211.0], [28.7, 211.0], [28.8, 212.0], [28.9, 212.0], [29.0, 212.0], [29.1, 213.0], [29.2, 213.0], [29.3, 214.0], [29.4, 214.0], [29.5, 214.0], [29.6, 215.0], [29.7, 215.0], [29.8, 215.0], [29.9, 216.0], [30.0, 216.0], [30.1, 217.0], [30.2, 217.0], [30.3, 218.0], [30.4, 218.0], [30.5, 218.0], [30.6, 219.0], [30.7, 219.0], [30.8, 219.0], [30.9, 220.0], [31.0, 220.0], [31.1, 221.0], [31.2, 222.0], [31.3, 222.0], [31.4, 222.0], [31.5, 223.0], [31.6, 223.0], [31.7, 224.0], [31.8, 224.0], [31.9, 224.0], [32.0, 225.0], [32.1, 225.0], [32.2, 226.0], [32.3, 226.0], [32.4, 227.0], [32.5, 227.0], [32.6, 228.0], [32.7, 228.0], [32.8, 228.0], [32.9, 229.0], [33.0, 229.0], [33.1, 230.0], [33.2, 230.0], [33.3, 231.0], [33.4, 231.0], [33.5, 232.0], [33.6, 232.0], [33.7, 233.0], [33.8, 233.0], [33.9, 234.0], [34.0, 234.0], [34.1, 235.0], [34.2, 235.0], [34.3, 236.0], [34.4, 236.0], [34.5, 237.0], [34.6, 237.0], [34.7, 238.0], [34.8, 238.0], [34.9, 239.0], [35.0, 239.0], [35.1, 240.0], [35.2, 240.0], [35.3, 241.0], [35.4, 241.0], [35.5, 241.0], [35.6, 242.0], [35.7, 242.0], [35.8, 243.0], [35.9, 243.0], [36.0, 243.0], [36.1, 244.0], [36.2, 244.0], [36.3, 245.0], [36.4, 245.0], [36.5, 246.0], [36.6, 246.0], [36.7, 247.0], [36.8, 247.0], [36.9, 248.0], [37.0, 248.0], [37.1, 248.0], [37.2, 249.0], [37.3, 250.0], [37.4, 250.0], [37.5, 250.0], [37.6, 251.0], [37.7, 251.0], [37.8, 252.0], [37.9, 252.0], [38.0, 252.0], [38.1, 253.0], [38.2, 253.0], [38.3, 254.0], [38.4, 254.0], [38.5, 255.0], [38.6, 256.0], [38.7, 256.0], [38.8, 256.0], [38.9, 257.0], [39.0, 258.0], [39.1, 258.0], [39.2, 259.0], [39.3, 259.0], [39.4, 260.0], [39.5, 260.0], [39.6, 261.0], [39.7, 261.0], [39.8, 262.0], [39.9, 263.0], [40.0, 263.0], [40.1, 263.0], [40.2, 264.0], [40.3, 264.0], [40.4, 265.0], [40.5, 266.0], [40.6, 266.0], [40.7, 267.0], [40.8, 268.0], [40.9, 269.0], [41.0, 269.0], [41.1, 270.0], [41.2, 270.0], [41.3, 271.0], [41.4, 272.0], [41.5, 272.0], [41.6, 273.0], [41.7, 273.0], [41.8, 274.0], [41.9, 274.0], [42.0, 275.0], [42.1, 276.0], [42.2, 276.0], [42.3, 277.0], [42.4, 277.0], [42.5, 278.0], [42.6, 279.0], [42.7, 279.0], [42.8, 280.0], [42.9, 281.0], [43.0, 282.0], [43.1, 282.0], [43.2, 283.0], [43.3, 285.0], [43.4, 286.0], [43.5, 287.0], [43.6, 287.0], [43.7, 287.0], [43.8, 288.0], [43.9, 289.0], [44.0, 290.0], [44.1, 291.0], [44.2, 292.0], [44.3, 294.0], [44.4, 295.0], [44.5, 296.0], [44.6, 298.0], [44.7, 299.0], [44.8, 300.0], [44.9, 301.0], [45.0, 303.0], [45.1, 304.0], [45.2, 306.0], [45.3, 308.0], [45.4, 310.0], [45.5, 311.0], [45.6, 312.0], [45.7, 314.0], [45.8, 316.0], [45.9, 317.0], [46.0, 318.0], [46.1, 319.0], [46.2, 320.0], [46.3, 321.0], [46.4, 322.0], [46.5, 323.0], [46.6, 324.0], [46.7, 325.0], [46.8, 325.0], [46.9, 326.0], [47.0, 327.0], [47.1, 328.0], [47.2, 329.0], [47.3, 329.0], [47.4, 330.0], [47.5, 330.0], [47.6, 331.0], [47.7, 331.0], [47.8, 332.0], [47.9, 333.0], [48.0, 334.0], [48.1, 334.0], [48.2, 335.0], [48.3, 335.0], [48.4, 337.0], [48.5, 337.0], [48.6, 338.0], [48.7, 339.0], [48.8, 340.0], [48.9, 341.0], [49.0, 342.0], [49.1, 342.0], [49.2, 343.0], [49.3, 344.0], [49.4, 345.0], [49.5, 345.0], [49.6, 346.0], [49.7, 347.0], [49.8, 347.0], [49.9, 348.0], [50.0, 349.0], [50.1, 349.0], [50.2, 350.0], [50.3, 351.0], [50.4, 351.0], [50.5, 351.0], [50.6, 352.0], [50.7, 353.0], [50.8, 353.0], [50.9, 354.0], [51.0, 355.0], [51.1, 356.0], [51.2, 356.0], [51.3, 357.0], [51.4, 357.0], [51.5, 358.0], [51.6, 358.0], [51.7, 358.0], [51.8, 359.0], [51.9, 360.0], [52.0, 360.0], [52.1, 361.0], [52.2, 362.0], [52.3, 362.0], [52.4, 363.0], [52.5, 363.0], [52.6, 364.0], [52.7, 365.0], [52.8, 366.0], [52.9, 367.0], [53.0, 368.0], [53.1, 368.0], [53.2, 369.0], [53.3, 370.0], [53.4, 370.0], [53.5, 371.0], [53.6, 372.0], [53.7, 372.0], [53.8, 373.0], [53.9, 374.0], [54.0, 375.0], [54.1, 376.0], [54.2, 377.0], [54.3, 378.0], [54.4, 379.0], [54.5, 380.0], [54.6, 380.0], [54.7, 381.0], [54.8, 382.0], [54.9, 383.0], [55.0, 385.0], [55.1, 385.0], [55.2, 386.0], [55.3, 388.0], [55.4, 389.0], [55.5, 389.0], [55.6, 390.0], [55.7, 392.0], [55.8, 393.0], [55.9, 394.0], [56.0, 395.0], [56.1, 396.0], [56.2, 397.0], [56.3, 399.0], [56.4, 399.0], [56.5, 400.0], [56.6, 401.0], [56.7, 402.0], [56.8, 403.0], [56.9, 404.0], [57.0, 405.0], [57.1, 406.0], [57.2, 407.0], [57.3, 408.0], [57.4, 409.0], [57.5, 409.0], [57.6, 411.0], [57.7, 412.0], [57.8, 414.0], [57.9, 416.0], [58.0, 418.0], [58.1, 421.0], [58.2, 422.0], [58.3, 425.0], [58.4, 427.0], [58.5, 429.0], [58.6, 433.0], [58.7, 436.0], [58.8, 440.0], [58.9, 443.0], [59.0, 446.0], [59.1, 451.0], [59.2, 461.0], [59.3, 466.0], [59.4, 477.0], [59.5, 494.0], [59.6, 504.0], [59.7, 520.0], [59.8, 530.0], [59.9, 544.0], [60.0, 564.0], [60.1, 584.0], [60.2, 610.0], [60.3, 649.0], [60.4, 679.0], [60.5, 689.0], [60.6, 711.0], [60.7, 731.0], [60.8, 763.0], [60.9, 787.0], [61.0, 807.0], [61.1, 855.0], [61.2, 911.0], [61.3, 942.0], [61.4, 1001.0], [61.5, 1038.0], [61.6, 1068.0], [61.7, 1094.0], [61.8, 1113.0], [61.9, 1133.0], [62.0, 1159.0], [62.1, 1216.0], [62.2, 1253.0], [62.3, 1273.0], [62.4, 1318.0], [62.5, 1394.0], [62.6, 1458.0], [62.7, 1531.0], [62.8, 1566.0], [62.9, 1591.0], [63.0, 1636.0], [63.1, 1648.0], [63.2, 1655.0], [63.3, 1675.0], [63.4, 1733.0], [63.5, 1747.0], [63.6, 1757.0], [63.7, 1790.0], [63.8, 1795.0], [63.9, 1800.0], [64.0, 1824.0], [64.1, 1833.0], [64.2, 1857.0], [64.3, 1879.0], [64.4, 1897.0], [64.5, 1904.0], [64.6, 1910.0], [64.7, 1912.0], [64.8, 1915.0], [64.9, 1936.0], [65.0, 1937.0], [65.1, 1937.0], [65.2, 1938.0], [65.3, 1938.0], [65.4, 1939.0], [65.5, 1940.0], [65.6, 1940.0], [65.7, 1940.0], [65.8, 1941.0], [65.9, 1943.0], [66.0, 1945.0], [66.1, 1946.0], [66.2, 1947.0], [66.3, 1949.0], [66.4, 1955.0], [66.5, 2067.0], [66.6, 2073.0], [66.7, 2099.0], [66.8, 2103.0], [66.9, 2433.0], [67.0, 2446.0], [67.1, 2446.0], [67.2, 2447.0], [67.3, 2447.0], [67.4, 2448.0], [67.5, 2449.0], [67.6, 2450.0], [67.7, 2450.0], [67.8, 2452.0], [67.9, 2453.0], [68.0, 2455.0], [68.1, 2456.0], [68.2, 2456.0], [68.3, 2458.0], [68.4, 2502.0], [68.5, 2503.0], [68.6, 2510.0], [68.7, 2561.0], [68.8, 2564.0], [68.9, 2588.0], [69.0, 2630.0], [69.1, 2706.0], [69.2, 2744.0], [69.3, 2745.0], [69.4, 2745.0], [69.5, 2745.0], [69.6, 2746.0], [69.7, 2746.0], [69.8, 2746.0], [69.9, 2747.0], [70.0, 2747.0], [70.1, 2748.0], [70.2, 2749.0], [70.3, 2791.0], [70.4, 2916.0], [70.5, 2917.0], [70.6, 2920.0], [70.7, 2924.0], [70.8, 2939.0], [70.9, 2979.0], [71.0, 3036.0], [71.1, 3083.0], [71.2, 3146.0], [71.3, 3164.0], [71.4, 3183.0], [71.5, 3212.0], [71.6, 3235.0], [71.7, 3271.0], [71.8, 3327.0], [71.9, 3328.0], [72.0, 3331.0], [72.1, 3332.0], [72.2, 3333.0], [72.3, 3334.0], [72.4, 3335.0], [72.5, 3336.0], [72.6, 3337.0], [72.7, 3338.0], [72.8, 3338.0], [72.9, 3339.0], [73.0, 3340.0], [73.1, 3341.0], [73.2, 3343.0], [73.3, 3345.0], [73.4, 3349.0], [73.5, 3510.0], [73.6, 3518.0], [73.7, 3608.0], [73.8, 3609.0], [73.9, 3610.0], [74.0, 3611.0], [74.1, 3616.0], [74.2, 3621.0], [74.3, 3624.0], [74.4, 3633.0], [74.5, 3634.0], [74.6, 3634.0], [74.7, 3635.0], [74.8, 3637.0], [74.9, 3654.0], [75.0, 3655.0], [75.1, 3657.0], [75.2, 3659.0], [75.3, 3664.0], [75.4, 3706.0], [75.5, 3710.0], [75.6, 3712.0], [75.7, 3713.0], [75.8, 3714.0], [75.9, 3715.0], [76.0, 3716.0], [76.1, 3718.0], [76.2, 3769.0], [76.3, 4021.0], [76.4, 4073.0], [76.5, 4320.0], [76.6, 4322.0], [76.7, 4323.0], [76.8, 4325.0], [76.9, 4327.0], [77.0, 4330.0], [77.1, 4353.0], [77.2, 4354.0], [77.3, 4354.0], [77.4, 4355.0], [77.5, 4357.0], [77.6, 4368.0], [77.7, 4374.0], [77.8, 4375.0], [77.9, 4376.0], [78.0, 4377.0], [78.1, 4378.0], [78.2, 4379.0], [78.3, 4379.0], [78.4, 4380.0], [78.5, 4384.0], [78.6, 4387.0], [78.7, 4389.0], [78.8, 4391.0], [78.9, 4393.0], [79.0, 4395.0], [79.1, 4398.0], [79.2, 4402.0], [79.3, 4405.0], [79.4, 4409.0], [79.5, 4414.0], [79.6, 4440.0], [79.7, 4441.0], [79.8, 4443.0], [79.9, 4443.0], [80.0, 4445.0], [80.1, 4446.0], [80.2, 4446.0], [80.3, 4447.0], [80.4, 4448.0], [80.5, 4451.0], [80.6, 4452.0], [80.7, 4453.0], [80.8, 4454.0], [80.9, 4455.0], [81.0, 4463.0], [81.1, 4474.0], [81.2, 4477.0], [81.3, 4479.0], [81.4, 4480.0], [81.5, 4484.0], [81.6, 4489.0], [81.7, 4542.0], [81.8, 4633.0], [81.9, 4658.0], [82.0, 4699.0], [82.1, 4700.0], [82.2, 4702.0], [82.3, 4705.0], [82.4, 4709.0], [82.5, 4770.0], [82.6, 4775.0], [82.7, 4776.0], [82.8, 4778.0], [82.9, 4780.0], [83.0, 4783.0], [83.1, 4866.0], [83.2, 4936.0], [83.3, 4985.0], [83.4, 5063.0], [83.5, 5102.0], [83.6, 5469.0], [83.7, 5521.0], [83.8, 5573.0], [83.9, 5576.0], [84.0, 5577.0], [84.1, 5578.0], [84.2, 5579.0], [84.3, 5580.0], [84.4, 5580.0], [84.5, 5581.0], [84.6, 5581.0], [84.7, 5582.0], [84.8, 5582.0], [84.9, 5582.0], [85.0, 5583.0], [85.1, 5584.0], [85.2, 5584.0], [85.3, 5585.0], [85.4, 5586.0], [85.5, 5587.0], [85.6, 5587.0], [85.7, 5588.0], [85.8, 5588.0], [85.9, 5589.0], [86.0, 5591.0], [86.1, 5593.0], [86.2, 5594.0], [86.3, 5619.0], [86.4, 5621.0], [86.5, 5622.0], [86.6, 5622.0], [86.7, 5623.0], [86.8, 5623.0], [86.9, 5624.0], [87.0, 5624.0], [87.1, 5625.0], [87.2, 5625.0], [87.3, 5626.0], [87.4, 5627.0], [87.5, 5628.0], [87.6, 5628.0], [87.7, 5629.0], [87.8, 5630.0], [87.9, 5631.0], [88.0, 5632.0], [88.1, 5632.0], [88.2, 5633.0], [88.3, 5633.0], [88.4, 5634.0], [88.5, 5635.0], [88.6, 5635.0], [88.7, 5636.0], [88.8, 5636.0], [88.9, 5637.0], [89.0, 5639.0], [89.1, 5640.0], [89.2, 5643.0], [89.3, 5742.0], [89.4, 5754.0], [89.5, 5794.0], [89.6, 5802.0], [89.7, 5836.0], [89.8, 5894.0], [89.9, 5895.0], [90.0, 5898.0], [90.1, 6005.0], [90.2, 6066.0], [90.3, 6102.0], [90.4, 6136.0], [90.5, 6137.0], [90.6, 6153.0], [90.7, 6164.0], [90.8, 6165.0], [90.9, 6165.0], [91.0, 6166.0], [91.1, 6166.0], [91.2, 6167.0], [91.3, 6169.0], [91.4, 6171.0], [91.5, 6171.0], [91.6, 6172.0], [91.7, 6172.0], [91.8, 6173.0], [91.9, 6174.0], [92.0, 6174.0], [92.1, 6174.0], [92.2, 6175.0], [92.3, 6175.0], [92.4, 6175.0], [92.5, 6176.0], [92.6, 6176.0], [92.7, 6176.0], [92.8, 6177.0], [92.9, 6177.0], [93.0, 6178.0], [93.1, 6180.0], [93.2, 6193.0], [93.3, 6372.0], [93.4, 6486.0], [93.5, 6486.0], [93.6, 6487.0], [93.7, 6498.0], [93.8, 6499.0], [93.9, 6502.0], [94.0, 6511.0], [94.1, 6513.0], [94.2, 6515.0], [94.3, 6520.0], [94.4, 6549.0], [94.5, 6604.0], [94.6, 6612.0], [94.7, 6612.0], [94.8, 6617.0], [94.9, 6617.0], [95.0, 6618.0], [95.1, 6618.0], [95.2, 6618.0], [95.3, 6619.0], [95.4, 6619.0], [95.5, 6620.0], [95.6, 6621.0], [95.7, 6622.0], [95.8, 6622.0], [95.9, 6623.0], [96.0, 6624.0], [96.1, 6626.0], [96.2, 6627.0], [96.3, 6628.0], [96.4, 6630.0], [96.5, 6667.0], [96.6, 6688.0], [96.7, 6741.0], [96.8, 6801.0], [96.9, 6887.0], [97.0, 6897.0], [97.1, 6898.0], [97.2, 6901.0], [97.3, 6904.0], [97.4, 6906.0], [97.5, 6914.0], [97.6, 7053.0], [97.7, 7168.0], [97.8, 7219.0], [97.9, 7232.0], [98.0, 7316.0], [98.1, 7556.0], [98.2, 7559.0], [98.3, 7658.0], [98.4, 7660.0], [98.5, 7662.0], [98.6, 7707.0], [98.7, 7711.0], [98.8, 7740.0], [98.9, 7743.0], [99.0, 8654.0], [99.1, 8687.0], [99.2, 8694.0], [99.3, 8711.0], [99.4, 9039.0], [99.5, 9059.0], [99.6, 9281.0], [99.7, 9287.0], [99.8, 9308.0], [99.9, 9532.0], [100.0, 9565.0]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4335.0, "series": [{"data": [[0.0, 42.0], [600.0, 67.0], [700.0, 74.0], [800.0, 36.0], [900.0, 36.0], [1000.0, 66.0], [1100.0, 51.0], [1200.0, 52.0], [1300.0, 23.0], [1400.0, 25.0], [1500.0, 46.0], [1600.0, 72.0], [1700.0, 94.0], [1800.0, 93.0], [1900.0, 351.0], [2000.0, 42.0], [2100.0, 26.0], [2200.0, 4.0], [2400.0, 256.0], [2500.0, 96.0], [2600.0, 25.0], [2800.0, 5.0], [2700.0, 211.0], [2900.0, 101.0], [3000.0, 32.0], [3100.0, 61.0], [3200.0, 47.0], [3300.0, 288.0], [3400.0, 12.0], [3500.0, 34.0], [3700.0, 160.0], [3600.0, 283.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 23.0], [4300.0, 463.0], [4600.0, 54.0], [4400.0, 429.0], [4500.0, 23.0], [4700.0, 170.0], [4800.0, 21.0], [4900.0, 31.0], [5000.0, 24.0], [5100.0, 7.0], [5200.0, 2.0], [5500.0, 448.0], [5400.0, 17.0], [5600.0, 517.0], [5700.0, 52.0], [5800.0, 76.0], [6100.0, 513.0], [6000.0, 27.0], [5900.0, 14.0], [6200.0, 8.0], [6300.0, 5.0], [6400.0, 85.0], [6500.0, 110.0], [6600.0, 377.0], [6800.0, 58.0], [6700.0, 28.0], [6900.0, 68.0], [7000.0, 18.0], [7100.0, 12.0], [7200.0, 49.0], [7300.0, 5.0], [7400.0, 3.0], [7500.0, 37.0], [7600.0, 56.0], [7900.0, 3.0], [7700.0, 56.0], [8500.0, 1.0], [8600.0, 45.0], [8700.0, 21.0], [8300.0, 3.0], [8900.0, 1.0], [9000.0, 41.0], [9200.0, 32.0], [9300.0, 12.0], [9400.0, 1.0], [9500.0, 28.0], [100.0, 4335.0], [200.0, 3315.0], [300.0, 2004.0], [400.0, 536.0], [500.0, 106.0]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 60.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 17125.0, "series": [{"data": [[0.0, 60.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 17125.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 544.2776258364834, "minX": 1.7305908E12, "maxY": 544.2776258364834, "series": [{"data": [[1.7305908E12, 544.2776258364834]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7305908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 101.7, "minX": 9.0, "maxY": 9539.0, "series": [{"data": [[9.0, 150.0], [11.0, 130.0], [12.0, 133.0], [14.0, 140.25], [15.0, 143.0], [17.0, 165.0], [18.0, 153.0], [20.0, 187.0], [21.0, 169.66666666666666], [23.0, 151.0], [24.0, 189.0], [26.0, 153.83333333333331], [27.0, 153.0], [28.0, 156.0], [29.0, 151.0], [30.0, 136.0], [31.0, 132.0], [32.0, 134.66666666666669], [33.0, 117.33333333333333], [35.0, 103.55555555555556], [36.0, 108.2], [37.0, 104.0], [38.0, 106.36363636363637], [39.0, 101.7], [41.0, 109.6923076923077], [42.0, 109.57142857142857], [43.0, 119.5], [44.0, 114.75], [45.0, 111.72727272727273], [46.0, 107.0], [47.0, 117.84615384615385], [48.0, 107.70000000000002], [49.0, 109.0], [50.0, 117.6], [51.0, 109.125], [52.0, 106.0], [53.0, 143.30769230769226], [54.0, 116.3125], [55.0, 169.0], [56.0, 115.14285714285715], [57.0, 111.07142857142856], [59.0, 119.25000000000001], [60.0, 111.81818181818181], [61.0, 109.0], [62.0, 122.86666666666669], [63.0, 140.53846153846155], [64.0, 103.0], [65.0, 132.47368421052633], [66.0, 115.76470588235293], [67.0, 121.0], [68.0, 119.3125], [69.0, 129.44444444444443], [70.0, 136.0], [71.0, 119.9375], [72.0, 115.4], [73.0, 118.66666666666667], [74.0, 112.33333333333336], [75.0, 109.70833333333334], [76.0, 114.5], [77.0, 114.63157894736842], [78.0, 125.55555555555557], [80.0, 120.73333333333332], [81.0, 121.31250000000001], [82.0, 174.0], [83.0, 123.52380952380953], [84.0, 125.52000000000001], [86.0, 116.3125], [87.0, 124.24137931034481], [89.0, 133.3846153846154], [90.0, 180.25], [92.0, 160.68965517241378], [93.0, 175.05555555555557], [95.0, 124.28571428571429], [96.0, 114.16666666666667], [97.0, 113.5], [98.0, 148.1818181818182], [99.0, 140.91666666666669], [101.0, 145.68965517241378], [102.0, 139.58333333333331], [103.0, 130.0], [104.0, 134.86666666666667], [105.0, 136.1428571428571], [106.0, 144.2], [107.0, 122.57142857142858], [108.0, 137.83333333333337], [110.0, 171.03030303030303], [111.0, 144.17391304347828], [112.0, 159.0], [113.0, 135.69565217391303], [114.0, 135.07692307692304], [115.0, 140.0], [116.0, 135.80645161290326], [117.0, 132.28000000000003], [119.0, 131.88235294117646], [120.0, 123.24137931034483], [121.0, 117.5], [122.0, 130.24137931034483], [123.0, 131.375], [124.0, 135.0], [125.0, 142.04347826086953], [126.0, 140.87500000000003], [127.0, 127.0], [128.0, 129.31428571428572], [129.0, 120.875], [130.0, 133.5], [131.0, 140.42857142857142], [132.0, 148.38888888888886], [133.0, 152.0], [134.0, 149.37142857142857], [135.0, 154.41935483870967], [136.0, 128.4], [137.0, 133.17647058823533], [138.0, 154.53846153846155], [139.0, 156.0], [140.0, 140.72], [141.0, 149.19354838709677], [143.0, 144.90322580645164], [144.0, 140.22222222222223], [145.0, 146.0], [146.0, 141.9622641509434], [147.0, 138.29411764705884], [148.0, 120.25], [149.0, 133.9666666666666], [150.0, 184.15625], [151.0, 183.63636363636363], [152.0, 153.7037037037037], [153.0, 142.1578947368421], [155.0, 143.81818181818184], [156.0, 151.52173913043487], [158.0, 154.33333333333334], [159.0, 139.14285714285714], [161.0, 169.41666666666666], [162.0, 147.38709677419354], [163.0, 171.22222222222223], [164.0, 174.0476190476191], [165.0, 151.61538461538458], [166.0, 155.5], [167.0, 159.87999999999997], [168.0, 145.28], [169.0, 163.5], [170.0, 158.47058823529414], [171.0, 144.4871794871795], [172.0, 157.33333333333334], [173.0, 178.15789473684214], [174.0, 161.99999999999997], [175.0, 149.66666666666666], [176.0, 169.70588235294116], [177.0, 172.48387096774192], [178.0, 150.0], [179.0, 165.8857142857143], [180.0, 157.73333333333335], [181.0, 147.0], [182.0, 150.09374999999991], [183.0, 143.8125], [184.0, 161.27272727272728], [185.0, 169.25000000000006], [186.0, 171.125], [187.0, 182.50000000000003], [188.0, 167.6086956521739], [189.0, 171.5151515151515], [190.0, 175.5], [191.0, 155.17142857142858], [192.0, 164.18518518518516], [193.0, 162.6], [194.0, 175.75999999999996], [195.0, 200.3913043478261], [196.0, 200.0], [197.0, 191.22727272727275], [198.0, 179.7], [200.0, 223.85106382978728], [201.0, 175.14705882352936], [202.0, 163.0], [203.0, 185.62222222222215], [204.0, 145.96296296296302], [205.0, 151.5], [206.0, 168.00000000000006], [207.0, 162.58974358974356], [208.0, 156.5], [209.0, 163.11764705882354], [210.0, 167.74193548387098], [212.0, 200.06060606060606], [211.0, 158.33333333333334], [213.0, 210.38461538461542], [214.0, 201.8], [215.0, 191.7333333333333], [216.0, 163.67647058823533], [217.0, 179.14285714285714], [218.0, 190.89285714285714], [219.0, 188.1304347826087], [220.0, 188.2], [221.0, 191.2222222222222], [222.0, 202.9411764705882], [223.0, 206.20000000000002], [224.0, 186.1351351351351], [225.0, 201.7073170731707], [226.0, 198.47058823529412], [227.0, 204.25], [228.0, 210.70588235294113], [229.0, 202.55172413793105], [230.0, 199.42424242424244], [231.0, 206.09090909090915], [233.0, 192.42], [234.0, 180.1428571428572], [235.0, 189.33333333333334], [236.0, 192.82222222222222], [237.0, 191.0], [238.0, 184.33333333333334], [239.0, 191.36363636363635], [240.0, 189.97297297297303], [242.0, 187.6857142857143], [241.0, 184.16666666666666], [243.0, 191.08695652173915], [245.0, 194.90909090909096], [246.0, 183.56250000000003], [247.0, 177.05555555555554], [248.0, 192.85365853658533], [249.0, 219.52380952380955], [250.0, 221.66666666666666], [251.0, 198.76785714285714], [252.0, 188.33333333333331], [253.0, 182.0], [254.0, 189.2407407407408], [255.0, 189.80645161290326], [257.0, 187.19999999999996], [256.0, 177.83333333333331], [258.0, 192.44897959183677], [259.0, 177.2], [260.0, 188.62068965517244], [261.0, 186.6451612903226], [262.0, 198.0], [263.0, 193.10416666666663], [264.0, 195.91304347826087], [269.0, 247.50000000000003], [270.0, 202.21052631578948], [265.0, 191.85714285714286], [266.0, 195.48571428571427], [267.0, 209.79310344827587], [273.0, 257.5483870967742], [272.0, 235.99999999999997], [274.0, 236.5], [275.0, 249.51999999999998], [276.0, 252.2571428571428], [278.0, 327.9399999999999], [279.0, 246.19354838709674], [281.0, 275.08], [287.0, 295.8684210526316], [286.0, 259.0], [284.0, 259.60465116279073], [285.0, 282.88888888888886], [282.0, 257.94736842105266], [283.0, 271.0], [289.0, 278.2], [288.0, 283.76000000000005], [290.0, 234.28888888888886], [291.0, 250.46666666666664], [292.0, 269.5], [293.0, 259.51851851851853], [294.0, 228.76190476190476], [295.0, 213.25000000000003], [296.0, 315.61111111111114], [303.0, 227.93617021276594], [300.0, 205.25490196078428], [301.0, 196.0], [302.0, 222.00000000000006], [297.0, 266.67857142857144], [298.0, 249.23529411764707], [299.0, 253.0869565217391], [305.0, 201.02857142857144], [304.0, 222.76923076923075], [306.0, 222.20000000000002], [307.0, 344.3636363636364], [308.0, 221.56756756756752], [309.0, 263.5142857142857], [310.0, 234.0], [311.0, 243.35135135135135], [312.0, 257.82051282051276], [318.0, 238.1818181818182], [319.0, 221.33333333333334], [317.0, 232.9302325581395], [316.0, 227.0], [313.0, 210.0], [314.0, 279.1521739130435], [315.0, 245.10204081632654], [321.0, 229.5], [320.0, 223.96052631578954], [322.0, 212.0], [323.0, 227.78125], [324.0, 216.69047619047618], [325.0, 185.0], [326.0, 270.8787878787879], [327.0, 212.1290322580645], [328.0, 236.4], [335.0, 292.9761904761905], [332.0, 218.63888888888886], [333.0, 233.1142857142857], [329.0, 225.4489795918367], [330.0, 241.49999999999997], [337.0, 225.4], [336.0, 238.80952380952385], [338.0, 250.57894736842107], [339.0, 364.075], [340.0, 437.0], [341.0, 345.2857142857143], [342.0, 296.7777777777777], [343.0, 246.55555555555554], [344.0, 247.2173913043478], [350.0, 237.36842105263156], [351.0, 254.21428571428572], [348.0, 246.54347826086956], [349.0, 227.0], [345.0, 240.06666666666663], [347.0, 242.08], [346.0, 229.0], [353.0, 238.75], [352.0, 252.0], [354.0, 245.22857142857143], [355.0, 239.0], [356.0, 271.3555555555556], [357.0, 274.86842105263156], [358.0, 604.0], [359.0, 436.6949152542374], [360.0, 247.42372881355934], [366.0, 285.00000000000006], [367.0, 293.0555555555556], [364.0, 272.5], [365.0, 300.6326530612245], [362.0, 252.5], [363.0, 404.85], [361.0, 240.0], [369.0, 286.4666666666666], [368.0, 285.54], [370.0, 289.6], [371.0, 296.0526315789474], [372.0, 261.75555555555553], [373.0, 268.5], [374.0, 314.57142857142856], [375.0, 289.6842105263158], [377.0, 289.64444444444445], [378.0, 275.89743589743586], [379.0, 257.5], [376.0, 292.0], [383.0, 270.8214285714286], [380.0, 313.57692307692304], [381.0, 291.96428571428584], [387.0, 342.57377049180326], [385.0, 371.83333333333337], [384.0, 305.15789473684214], [386.0, 309.8823529411765], [389.0, 338.5588235294118], [390.0, 345.675], [392.0, 343.1], [399.0, 387.3488372093024], [396.0, 384.5217391304348], [398.0, 372.22727272727263], [393.0, 350.25], [395.0, 387.96969696969694], [412.0, 408.0], [401.0, 393.93548387096774], [402.0, 411.9166666666667], [404.0, 430.13513513513504], [405.0, 420.48484848484856], [407.0, 392.9268292682927], [408.0, 387.2058823529412], [410.0, 397.6896551724138], [411.0, 400.79591836734704], [413.0, 439.6818181818182], [414.0, 510.07142857142867], [415.0, 372.14285714285717], [417.0, 371.74999999999994], [416.0, 378.13043478260863], [418.0, 362.0], [419.0, 383.2], [420.0, 376.69387755102036], [422.0, 374.342105263158], [421.0, 350.0], [423.0, 382.30000000000007], [424.0, 364.5], [430.0, 322.0], [431.0, 364.78378378378375], [428.0, 339.7111111111111], [429.0, 312.054054054054], [425.0, 335.64285714285717], [426.0, 352.84210526315786], [427.0, 345.00000000000006], [433.0, 329.66666666666663], [432.0, 331.4814814814815], [434.0, 346.49999999999994], [435.0, 370.0], [436.0, 363.0], [437.0, 393.70588235294116], [438.0, 355.2898550724637], [440.0, 360.6666666666667], [446.0, 463.4615384615384], [447.0, 462.5384615384616], [444.0, 398.52941176470586], [445.0, 379.6666666666667], [441.0, 404.5], [443.0, 403.55555555555554], [449.0, 467.0], [448.0, 449.8], [450.0, 422.8421052631579], [451.0, 407.0], [452.0, 431.46666666666664], [453.0, 420.20930232558146], [454.0, 394.0], [455.0, 368.3269230769232], [456.0, 366.4799999999999], [462.0, 363.0999999999999], [463.0, 343.0], [460.0, 349.3333333333333], [461.0, 354.95744680851067], [457.0, 364.0], [458.0, 350.68181818181824], [459.0, 357.95238095238096], [465.0, 343.7142857142857], [464.0, 343.3035714285715], [466.0, 350.6], [467.0, 355.3809523809524], [468.0, 355.2558139534883], [469.0, 323.8], [470.0, 390.18181818181824], [471.0, 402.43999999999994], [472.0, 348.1666666666667], [478.0, 322.33333333333337], [479.0, 309.2253521126761], [476.0, 347.0952380952381], [477.0, 329.4722222222223], [473.0, 346.76811594202894], [474.0, 372.3684210526316], [475.0, 499.5], [481.0, 392.4], [480.0, 321.1162790697674], [482.0, 246.6666666666666], [483.0, 240.7142857142857], [484.0, 197.66666666666666], [485.0, 213.43548387096772], [486.0, 140.34782608695656], [487.0, 192.5], [488.0, 246.50000000000003], [489.0, 1129.1250000000002], [497.0, 1128.5384615384614], [528.0, 1468.0], [518.0, 1122.0], [519.0, 1185.0], [536.0, 1658.0], [537.0, 1678.3333333333333], [539.0, 1732.0], [540.0, 1744.75], [541.0, 1748.0], [542.0, 1753.6666666666667], [543.0, 1791.6], [521.0, 1253.0], [522.0, 1272.0], [530.0, 1507.0], [531.0, 1533.0], [533.0, 1585.0], [534.0, 1610.0], [545.0, 1792.3333333333333], [544.0, 1793.5], [557.0, 1228.4019607843134], [558.0, 748.0394736842105], [546.0, 1794.5555555555557], [548.0, 1799.333333333333], [549.0, 1798.2857142857142], [551.0, 1819.6], [575.0, 1481.3636363636365], [552.0, 1862.5], [553.0, 1868.0], [554.0, 1878.7142857142858], [555.0, 1880.4], [582.0, 1447.3000000000002], [702.0, 2122.0], [721.0, 2150.0], [799.0, 2333.75], [786.0, 2163.3333333333335], [785.0, 1953.3333333333333], [784.0, 2031.8333333333333], [788.0, 2456.0], [787.0, 1949.0], [797.0, 1720.3333333333335], [796.0, 1684.857142857143], [795.0, 2292.0], [794.0, 2202.0], [793.0, 1950.0], [783.0, 2200.5], [781.0, 2455.0], [780.0, 1958.0], [779.0, 560.0], [778.0, 1958.0], [776.0, 457.0], [790.0, 2075.75], [789.0, 2072.75], [825.0, 3731.7000000000003], [831.0, 3687.0], [820.0, 4866.0], [818.0, 1945.5], [817.0, 5664.875], [816.0, 5694.5], [821.0, 3790.75], [829.0, 2201.5], [828.0, 3469.5], [827.0, 3183.5], [826.0, 2500.5], [824.0, 6901.0], [807.0, 2285.5], [805.0, 2252.4], [803.0, 2353.8], [802.0, 2457.0], [801.0, 2201.5], [800.0, 2333.75], [815.0, 3140.777777777778], [813.0, 2074.5], [812.0, 2116.0], [811.0, 2095.428571428571], [809.0, 2049.4], [808.0, 2251.8], [823.0, 5635.0], [822.0, 4920.4], [858.0, 4714.2], [832.0, 4901.0], [839.0, 5473.666666666667], [838.0, 2456.0], [837.0, 3919.2], [836.0, 5647.714285714285], [835.0, 3937.1666666666665], [834.0, 5025.384615384615], [833.0, 3631.75], [843.0, 5215.857142857142], [842.0, 5701.5], [840.0, 5424.0], [845.0, 2453.0], [844.0, 4389.555555555555], [847.0, 2822.0], [846.0, 1944.0], [849.0, 4317.5], [855.0, 3904.0], [854.0, 4487.333333333333], [853.0, 5060.0], [852.0, 5134.75], [851.0, 5637.0], [850.0, 5634.0], [859.0, 3053.0], [860.0, 5236.75], [861.0, 5031.2], [862.0, 3926.5], [863.0, 4439.0], [848.0, 3504.6666666666665], [890.0, 4445.5], [868.0, 5463.8], [866.0, 4496.833333333334], [864.0, 4213.666666666667], [865.0, 4777.0], [879.0, 5635.0], [878.0, 5635.0], [867.0, 4642.444444444444], [870.0, 3122.5], [869.0, 6053.25], [871.0, 5426.5], [872.0, 3136.0], [875.0, 5635.0], [873.0, 5950.75], [877.0, 5034.0], [880.0, 5398.4], [895.0, 5047.5], [893.0, 4456.0], [894.0, 4452.5], [891.0, 5084.0], [892.0, 5085.5], [888.0, 5535.099999999999], [889.0, 5887.8], [881.0, 6034.0625], [883.0, 5169.2], [884.0, 6916.0], [885.0, 3222.0], [886.0, 6259.222222222223], [887.0, 6900.5], [900.0, 3322.0], [910.0, 3381.2935779816517], [897.0, 3294.0], [896.0, 5048.5], [911.0, 3308.4132231404965], [898.0, 5197.222222222223], [899.0, 4830.5], [904.0, 4065.75], [905.0, 4690.0], [903.0, 4162.0], [902.0, 3760.0], [901.0, 5633.0], [920.0, 5624.0], [922.0, 3402.5], [921.0, 3846.5], [924.0, 3687.0], [923.0, 4056.333333333333], [926.0, 2498.0], [925.0, 4044.3333333333335], [912.0, 2376.2638036809803], [913.0, 5631.0], [916.0, 3166.0], [914.0, 3027.0], [919.0, 2854.5], [917.0, 5631.0], [927.0, 3617.5], [907.0, 3596.3333333333335], [909.0, 3340.5], [908.0, 5049.666666666667], [952.0, 3613.0], [958.0, 3469.75], [959.0, 3998.3333333333335], [944.0, 3359.0], [946.0, 2197.5], [945.0, 4776.0], [956.0, 3787.6], [954.0, 3778.0], [953.0, 3611.5], [943.0, 3686.1111111111113], [929.0, 2454.0], [928.0, 3617.5], [931.0, 4005.3333333333335], [930.0, 4199.25], [933.0, 3615.5], [932.0, 4196.75], [935.0, 2453.0], [934.0, 3848.6], [942.0, 3614.5], [941.0, 3227.6666666666665], [939.0, 2917.6], [936.0, 3615.5], [940.0, 4777.0], [951.0, 3612.75], [949.0, 3613.0], [948.0, 3613.5], [947.0, 4193.5], [988.0, 2209.888888888889], [971.0, 2640.0], [970.0, 4478.5], [969.0, 3462.5], [968.0, 3466.5], [974.0, 3255.0], [973.0, 3666.8], [991.0, 2586.2307692307695], [976.0, 2773.0], [978.0, 2224.6], [977.0, 2334.3333333333335], [980.0, 2126.5], [979.0, 2450.0], [990.0, 1943.0], [989.0, 2341.0], [987.0, 1943.0], [985.0, 2511.0], [984.0, 2221.5], [967.0, 4480.0], [966.0, 3467.25], [965.0, 2451.0], [964.0, 3973.75], [963.0, 4481.333333333333], [962.0, 4485.0], [961.0, 2450.0], [960.0, 3611.5], [975.0, 2985.25], [982.0, 2196.5], [981.0, 2075.666666666667], [1017.0, 2860.3333333333335], [1022.0, 2629.5], [1023.0, 3167.6666666666665], [1009.0, 2866.6666666666665], [1011.0, 1938.0], [1010.0, 1939.3333333333333], [1013.0, 1938.5], [1012.0, 3196.0], [1021.0, 1937.0], [1020.0, 3320.5], [1018.0, 1938.6666666666667], [1016.0, 2859.6666666666665], [998.0, 2863.0], [996.0, 3169.666666666667], [994.0, 2990.5], [992.0, 1942.0], [1007.0, 2278.0], [1006.0, 3322.5], [1005.0, 2595.4], [1004.0, 3148.4], [1003.0, 2862.3333333333335], [1002.0, 2630.75], [1001.0, 3322.5], [1000.0, 2863.0], [1015.0, 1941.0], [1014.0, 4704.0], [1084.0, 1937.3333333333333], [1086.0, 1936.0], [1056.0, 6908.0], [1064.0, 1936.0], [1060.0, 6907.0], [1082.0, 1939.0], [1080.0, 1937.0], [1076.0, 1937.0], [1074.0, 2191.5], [1072.0, 1937.0], [1038.0, 3670.0], [1034.0, 3782.5], [1032.0, 5630.0], [1030.0, 1937.0], [1028.0, 5628.0], [1026.0, 1938.0], [1050.0, 854.5], [1042.0, 855.0], [1040.0, 2807.0], [1070.0, 1939.3333333333333], [1068.0, 1936.0], [1140.0, 2068.0], [1148.0, 3717.6666666666665], [1150.0, 2995.0], [1120.0, 1940.0], [1124.0, 1939.0], [1122.0, 1939.0], [1130.0, 1939.0], [1128.0, 1940.0], [1146.0, 2447.0], [1144.0, 4702.0], [1142.0, 2257.0], [1138.0, 1954.0], [1102.0, 1937.0], [1100.0, 1939.0], [1098.0, 5629.0], [1096.0, 3171.9999999999995], [1092.0, 1940.0], [1090.0, 1937.0], [1088.0, 1936.0], [1118.0, 1939.5], [1116.0, 1990.6], [1112.0, 1972.0], [1110.0, 1937.0], [1108.0, 1940.0], [1106.0, 1939.0], [1104.0, 1937.0], [1134.0, 1943.25], [1132.0, 1947.0], [1208.0, 2446.0], [1214.0, 2447.0], [1186.0, 2447.6666666666665], [1184.0, 2448.0], [1206.0, 2446.0], [1204.0, 2446.5], [1202.0, 2447.0], [1200.0, 2490.5], [1178.0, 2447.0], [1162.0, 2925.0], [1152.0, 2595.0], [1166.0, 2459.3333333333335], [1164.0, 2608.3333333333335], [1174.0, 2445.0], [1172.0, 2447.0], [1170.0, 2446.6666666666665], [1168.0, 2456.0], [1196.0, 2444.6], [1194.0, 2447.0], [1192.0, 2447.0], [1190.0, 2448.0], [1266.0, 4571.5], [1252.0, 3248.0], [1272.0, 4021.0], [1276.0, 5051.5], [1248.0, 3079.0], [1270.0, 4572.0], [1264.0, 3514.0], [1230.0, 2543.0], [1226.0, 2563.0], [1224.0, 2490.3333333333335], [1222.0, 2523.0], [1220.0, 2486.5], [1218.0, 2447.0], [1216.0, 2447.4], [1246.0, 2977.0], [1244.0, 2837.3333333333335], [1242.0, 2692.0], [1240.0, 2630.0], [1238.0, 2613.0], [1234.0, 2603.5], [1232.0, 2742.25], [1262.0, 3516.0], [1256.0, 3177.6666666666665], [1254.0, 3246.5], [1338.0, 4772.0], [1342.0, 4625.0], [1318.0, 5051.5], [1314.0, 4861.666666666667], [1336.0, 4587.5], [1334.0, 4587.5], [1332.0, 4699.0], [1330.0, 4699.0], [1328.0, 4477.0], [1294.0, 4923.0], [1290.0, 4581.5], [1288.0, 5626.0], [1286.0, 5626.5], [1308.0, 4482.0], [1306.0, 5050.833333333334], [1304.0, 5049.0], [1300.0, 5243.666666666667], [1326.0, 4624.0], [1322.0, 4699.0], [1404.0, 5623.5], [1380.0, 5159.0], [1394.0, 6887.0], [1358.0, 4701.0], [1356.0, 4581.5], [1354.0, 4701.0], [1352.0, 4542.0], [1348.0, 4618.0], [1346.0, 4463.0], [1390.0, 6887.0], [1382.0, 5623.0], [1376.0, 5315.333333333333], [1372.0, 4701.0], [1370.0, 4476.0], [1368.0, 4702.0], [1366.0, 4476.0], [1364.0, 4724.333333333333], [1360.0, 4588.0], [1420.0, 5361.5], [1432.0, 4449.9], [1434.0, 6886.0], [1438.0, 6900.0], [1410.0, 5623.0], [1408.0, 5623.0], [1416.0, 5623.0], [1414.0, 5623.2], [1436.0, 5625.0], [1422.0, 5284.0], [1466.0, 4379.0], [1450.0, 6038.0], [1448.0, 7102.0], [1446.0, 6886.0], [1444.0, 5623.5], [1442.0, 5626.0], [1424.0, 5115.666666666667], [1426.0, 5335.666666666667], [1428.0, 4897.176470588235], [1430.0, 4486.400000000001], [1504.0, 3357.0], [1478.0, 4378.8], [1506.0, 3235.0], [1508.0, 3119.0], [1510.0, 4389.0], [1490.0, 4377.571428571429], [1498.0, 3222.5], [1500.0, 3444.9714285714285], [1502.0, 3543.333333333333], [1590.0, 4334.1], [1548.0, 2377.4022988505744], [1566.0, 2063.4285714285716], [1540.0, 4316.0], [1538.0, 3658.0], [1546.0, 3660.3333333333335], [1542.0, 5038.8], [1564.0, 4498.714285714285], [1562.0, 4135.25], [1560.0, 3091.4], [1558.0, 2921.5], [1584.0, 2887.9756097560976], [1550.0, 3745.909090909091], [1554.0, 3238.052631578947], [1552.0, 3733.571428571429], [1556.0, 3450.7999999999997], [1598.0, 3889.3333333333335], [1596.0, 4448.0], [1570.0, 3177.1249999999995], [1568.0, 4440.0], [1574.0, 4486.0], [1572.0, 4362.5], [1578.0, 3978.0000000000005], [1576.0, 4474.166666666667], [1582.0, 3720.4166666666665], [1580.0, 3839.0624999999995], [1594.0, 4326.5], [1592.0, 4284.785714285715], [1588.0, 4225.2], [1586.0, 4141.833333333334], [1608.0, 4239.0], [1652.0, 7755.59090909091], [1662.0, 5543.0], [1632.0, 8163.104166666669], [1612.0, 4566.4], [1630.0, 5170.0], [1600.0, 3749.833333333333], [1606.0, 4156.833333333333], [1604.0, 4868.0], [1602.0, 4504.666666666667], [1610.0, 4333.75], [1648.0, 5548.875], [1650.0, 6098.2], [1614.0, 4088.0], [1628.0, 4025.4740406320493], [1618.0, 4425.166666666667], [1616.0, 4035.5], [1622.0, 5230.666666666667], [1620.0, 4848.5], [1624.0, 5807.6], [1626.0, 7867.249999999999], [1654.0, 6172.595744680852], [1656.0, 5597.666666666667], [1660.0, 5596.571428571429], [1658.0, 5028.4], [1634.0, 6848.428571428572], [1636.0, 6057.4], [1638.0, 5023.0], [1642.0, 5140.2], [1640.0, 5280.666666666666], [1646.0, 5907.4], [1644.0, 5661.0], [1678.0, 5107.0], [1714.0, 2410.5], [1676.0, 5628.571428571429], [1674.0, 4449.5], [1716.0, 2168.0], [1722.0, 2521.6666666666665], [1724.0, 2748.0], [1694.0, 8661.5], [1696.0, 8652.666666666666], [1692.0, 5622.666666666666], [1688.0, 5621.0], [1686.0, 5620.0], [1682.0, 5626.0], [1680.0, 5496.285714285715], [1664.0, 3282.5000000000005], [1666.0, 5597.666666666667], [1668.0, 5482.833333333333], [1670.0, 4784.269230769231], [1672.0, 4838.333333333333], [1782.0, 5584.666666666667], [1732.0, 9539.0], [1788.0, 5644.5], [1786.0, 5882.666666666667], [1784.0, 5581.0], [1760.0, 6231.25], [1762.0, 7057.25], [1764.0, 7206.4], [1766.0, 7010.125000000001], [1768.0, 6887.571428571428], [1790.0, 6126.5], [1742.0, 6909.0], [1728.0, 5088.0], [1744.0, 5644.6], [1746.0, 5683.399999999999], [1748.0, 5823.142857142857], [1750.0, 5895.0], [1752.0, 5944.5], [1756.0, 6370.0], [1754.0, 6014.833333333333], [1758.0, 6136.5], [1730.0, 6051.5], [1734.0, 9539.0], [1740.0, 7716.0], [1800.0, 5579.75], [1818.0, 5873.333333333333], [1816.0, 5582.142857142857], [1814.0, 5584.0], [1812.0, 5580.0], [1810.0, 5581.75], [1808.0, 5582.0], [1820.0, 5704.499999999999], [1822.0, 5894.333333333333], [1802.0, 5582.0], [1824.0, 5765.6875], [1842.0, 6588.536363636363], [1844.0, 5671.714285714285], [1846.0, 5589.8], [1848.0, 5902.75], [1852.0, 5835.090909090909], [1850.0, 5587.5], [1854.0, 5956.444444444444], [1840.0, 6591.5161290322585], [1806.0, 5582.888888888889], [1826.0, 6279.125], [1828.0, 5809.4], [1830.0, 6161.0], [1832.0, 7105.75], [1834.0, 6626.51219512195], [1836.0, 5582.333333333333], [1838.0, 5998.6], [1804.0, 6534.255813953488], [1796.0, 5580.0], [1794.0, 5581.0], [1792.0, 5580.0], [1798.0, 5580.0], [1886.0, 5858.0], [1862.0, 5903.9], [1856.0, 5766.0], [1860.0, 5866.714285714285], [1884.0, 5863.5], [1882.0, 6150.222222222223], [1880.0, 6579.333333333333], [1878.0, 6192.888888888889], [1876.0, 5737.5], [1874.0, 6141.428571428571], [1872.0, 5858.0], [1912.0, 6045.6], [1918.0, 7686.5], [1888.0, 6183.833333333333], [1890.0, 6845.5], [1892.0, 6539.5], [1894.0, 6243.6], [1896.0, 5583.666666666667], [1898.0, 5658.25], [1900.0, 5578.0], [1902.0, 5578.0], [1916.0, 5805.5], [1910.0, 5579.0], [1908.0, 5581.0], [1870.0, 6369.0], [1864.0, 5846.2], [1083.0, 1938.5], [1027.0, 2138.0], [1053.0, 852.0], [1025.0, 3784.0], [1051.0, 852.0], [1047.0, 6892.0], [1041.0, 3784.0], [1085.0, 1937.6666666666667], [1059.0, 1936.0], [1063.0, 4422.0], [1061.0, 856.0], [1079.0, 1937.25], [1075.0, 1938.0], [1073.0, 1936.0], [1039.0, 4398.666666666667], [1035.0, 1937.5], [1033.0, 1939.5], [1031.0, 1938.0], [1029.0, 2675.6], [1071.0, 1939.5], [1069.0, 3593.333333333333], [1067.0, 6905.0], [1065.0, 6899.0], [1145.0, 4702.0], [1149.0, 2977.0], [1143.0, 3361.0], [1141.0, 2069.0], [1137.0, 1970.6666666666667], [1103.0, 1937.0], [1101.0, 2860.0], [1097.0, 5627.0], [1095.0, 1991.5], [1093.0, 5628.0], [1091.0, 2465.1428571428573], [1089.0, 1936.0], [1113.0, 1946.0], [1109.0, 1940.0], [1107.0, 1946.0], [1105.0, 1956.0], [1135.0, 1939.5], [1133.0, 1954.0], [1127.0, 1939.0], [1125.0, 1939.5], [1201.0, 2446.0], [1191.0, 2447.25], [1215.0, 2447.0], [1213.0, 2446.4], [1209.0, 2446.0], [1179.0, 2447.0], [1155.0, 2647.0], [1153.0, 2446.0], [1159.0, 2484.2], [1157.0, 2761.5], [1163.0, 2446.0], [1161.0, 2605.6666666666665], [1167.0, 2445.0], [1165.0, 2686.0], [1177.0, 2447.5], [1173.0, 2445.0], [1171.0, 2445.0], [1169.0, 2445.0], [1199.0, 2440.0], [1195.0, 2447.0], [1193.0, 2446.0], [1189.0, 2446.0], [1185.0, 2446.0], [1277.0, 4306.0], [1279.0, 5163.0], [1273.0, 4700.0], [1269.0, 4924.0], [1267.0, 3514.0], [1229.0, 2671.3333333333335], [1227.0, 2510.0], [1225.0, 2498.0], [1223.0, 2457.0], [1219.0, 2465.8], [1217.0, 2447.0], [1245.0, 3161.0], [1243.0, 2777.0], [1241.0, 2672.5], [1239.0, 2607.0], [1235.0, 2603.0], [1233.0, 2584.0], [1261.0, 3515.0], [1257.0, 3515.3333333333335], [1251.0, 3619.6666666666665], [1249.0, 2976.0], [1331.0, 4699.0], [1317.0, 4479.5], [1337.0, 4699.0], [1343.0, 4648.333333333333], [1313.0, 4479.0], [1333.0, 4477.0], [1329.0, 4699.0], [1295.0, 5627.0], [1293.0, 4699.0], [1291.0, 5626.0], [1289.0, 5162.5], [1287.0, 4476.0], [1285.0, 4700.0], [1311.0, 4479.0], [1309.0, 4861.666666666667], [1305.0, 5045.0], [1301.0, 4860.666666666667], [1299.0, 4475.5], [1297.0, 4480.0], [1325.0, 4481.0], [1323.0, 4480.0], [1321.0, 4477.0], [1379.0, 5622.5], [1403.0, 5389.0], [1405.0, 5623.0], [1401.0, 5622.5], [1395.0, 5624.0], [1373.0, 4701.0], [1345.0, 4464.0], [1353.0, 4773.0], [1349.0, 4700.0], [1371.0, 4701.0], [1369.0, 5622.0], [1367.0, 4702.0], [1365.0, 4474.0], [1363.0, 4701.0], [1389.0, 5623.0], [1383.0, 5624.0], [1381.0, 5624.0], [1377.0, 5622.0], [1441.0, 6886.0], [1431.0, 4431.0], [1427.0, 5114.0], [1421.0, 5364.0], [1419.0, 5625.0], [1417.0, 5624.0], [1415.0, 5624.0], [1413.0, 5623.0], [1411.0, 5622.0], [1409.0, 5622.5], [1423.0, 6129.6], [1439.0, 6893.0], [1437.0, 5627.0], [1435.0, 6927.0], [1433.0, 5625.428571428571], [1425.0, 5126.5], [1429.0, 4448.491379310347], [1449.0, 6549.0], [1447.0, 6900.0], [1445.0, 5627.0], [1485.0, 4375.0], [1497.0, 4292.387096774195], [1505.0, 2667.6666666666665], [1509.0, 2620.75], [1511.0, 2685.070945945944], [1489.0, 4377.8], [1491.0, 4374.0], [1501.0, 3867.333333333334], [1503.0, 4388.5], [1593.0, 4157.166666666666], [1555.0, 2322.666666666667], [1553.0, 3293.8], [1559.0, 4648.25], [1561.0, 3682.5714285714284], [1557.0, 3583.7000000000003], [1567.0, 3203.0], [1565.0, 3659.8888888888887], [1545.0, 4316.666666666667], [1541.0, 5137.5], [1551.0, 3409.3333333333335], [1549.0, 5636.833333333334], [1563.0, 2736.0], [1599.0, 4031.0], [1569.0, 2523.0], [1573.0, 3793.3333333333335], [1571.0, 4335.142857142857], [1579.0, 4574.333333333333], [1577.0, 3806.0000000000005], [1575.0, 4360.0], [1583.0, 4363.583333333334], [1581.0, 3725.0], [1597.0, 4601.333333333333], [1595.0, 4563.0], [1591.0, 4397.750000000001], [1589.0, 3977.1111111111113], [1587.0, 3779.8571428571427], [1585.0, 4441.666666666666], [1655.0, 6383.571428571429], [1663.0, 102.0], [1661.0, 5224.900000000001], [1659.0, 5024.5], [1657.0, 6133.153846153846], [1651.0, 8077.884615384615], [1649.0, 5745.0], [1631.0, 4760.5], [1603.0, 3819.666666666667], [1601.0, 4452.0], [1607.0, 3974.777777777778], [1605.0, 4157.0], [1611.0, 4032.0], [1613.0, 4456.0], [1609.0, 4032.5], [1615.0, 5533.749999999999], [1629.0, 5015.770270270272], [1625.0, 5464.285714285715], [1621.0, 4793.0], [1619.0, 5164.714285714285], [1617.0, 4455.0], [1627.0, 5329.5], [1653.0, 8145.062500000001], [1635.0, 5647.384615384615], [1639.0, 4643.5], [1637.0, 5373.6], [1643.0, 5103.833333333334], [1641.0, 4980.0], [1647.0, 5664.375], [1645.0, 5939.166666666666], [1633.0, 5974.916666666667], [1679.0, 5673.3], [1675.0, 5425.2], [1695.0, 8616.333333333334], [1667.0, 6177.5], [1665.0, 5310.0], [1677.0, 5037.5], [1715.0, 2408.5], [1721.0, 2072.0], [1725.0, 2745.0], [1697.0, 6828.2], [1699.0, 5626.0], [1693.0, 8694.807692307691], [1689.0, 5631.333333333333], [1687.0, 5620.500000000001], [1683.0, 5627.0], [1669.0, 5910.0], [1671.0, 4685.6], [1673.0, 5122.571428571428], [1705.0, 3477.102564102564], [1707.0, 2745.0], [1785.0, 5581.0], [1743.0, 3421.029411764706], [1741.0, 6141.0], [1789.0, 5901.0], [1783.0, 6585.25], [1791.0, 5580.0], [1761.0, 7499.428571428572], [1763.0, 6916.333333333334], [1765.0, 6636.0], [1767.0, 6773.666666666667], [1769.0, 7655.5], [1745.0, 5588.857142857143], [1747.0, 5593.0], [1749.0, 5900.333333333333], [1751.0, 5895.0], [1753.0, 5894.0], [1757.0, 6136.0], [1759.0, 6719.25], [1729.0, 7127.0], [1735.0, 9539.0], [1805.0, 6962.377358490565], [1823.0, 6447.650943396226], [1817.0, 5582.8], [1815.0, 5584.5], [1813.0, 5582.777777777777], [1809.0, 5582.7], [1819.0, 5585.0], [1821.0, 6403.166666666666], [1799.0, 5884.0], [1801.0, 5581.0], [1803.0, 6375.0], [1843.0, 5606.0], [1845.0, 5590.125], [1847.0, 5693.214285714286], [1849.0, 5702.0], [1853.0, 5651.0], [1855.0, 5920.571428571429], [1841.0, 6546.75925925926], [1825.0, 6327.333333333334], [1827.0, 6148.0], [1829.0, 6215.100000000001], [1831.0, 6294.4], [1833.0, 6571.11111111111], [1835.0, 5585.75], [1839.0, 6112.35294117647], [1837.0, 6101.5], [1797.0, 5684.714285714285], [1795.0, 5580.5], [1793.0, 5580.166666666667], [1907.0, 5580.0], [1915.0, 5617.25], [1887.0, 6314.75], [1859.0, 5743.5], [1857.0, 5957.0], [1861.0, 5953.5], [1883.0, 6465.0], [1881.0, 6314.333333333334], [1879.0, 6239.0], [1877.0, 6246.666666666667], [1875.0, 6135.5], [1873.0, 6183.0], [1919.0, 7694.333333333333], [1889.0, 6115.0], [1891.0, 6278.75], [1893.0, 6944.0], [1895.0, 6113.142857142857], [1897.0, 5633.833333333333], [1899.0, 5581.6], [1901.0, 5580.333333333333], [1903.0, 5581.0], [1913.0, 5612.0], [1911.0, 5581.333333333333], [1909.0, 5579.0], [1905.0, 5583.2], [1869.0, 6158.285714285714], [1867.0, 5928.714285714286], [1865.0, 6214.666666666667]], "isOverall": false, "label": "Get Authorized User", "isController": false}, {"data": [[747.4485306953742, 1915.3805062554518]], "isOverall": false, "label": "Get Authorized User-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1919.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 32587.783333333333, "minX": 1.7305908E12, "maxY": 469132.73333333334, "series": [{"data": [[1.7305908E12, 469132.73333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7305908E12, 32587.783333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7305908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1915.3805062554518, "minX": 1.7305908E12, "maxY": 1915.3805062554518, "series": [{"data": [[1.7305908E12, 1915.3805062554518]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7305908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 146.0320628455041, "minX": 1.7305908E12, "maxY": 146.0320628455041, "series": [{"data": [[1.7305908E12, 146.0320628455041]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7305908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1847.3024148967145, "minX": 1.7305908E12, "maxY": 1847.3024148967145, "series": [{"data": [[1.7305908E12, 1847.3024148967145]], "isOverall": false, "label": "Get Authorized User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7305908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 125.0, "minX": 1.7305908E12, "maxY": 219.0, "series": [{"data": [[1.7305908E12, 219.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7305908E12, 125.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7305908E12, 185.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7305908E12, 219.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7305908E12, 150.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7305908E12, 199.54999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7305908E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 1.0, "maxY": 9039.0, "series": [{"data": [[52.0, 150.0], [241.0, 151.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 3103.0], [603.0, 136.0], [669.0, 155.0], [658.0, 386.0], [712.0, 167.5], [716.0, 246.0], [726.0, 4376.0], [736.0, 190.0], [745.0, 286.0], [744.0, 362.0], [793.0, 190.0], [780.0, 6165.0], [812.0, 220.0], [848.0, 248.0], [844.0, 349.0], [958.0, 3636.0], [1248.0, 2916.5], [91.0, 7099.0], [1548.0, 5585.0], [123.0, 6509.0], [156.0, 9039.0], [185.0, 220.0], [241.0, 108.0], [1.0, 2458.0], [366.0, 116.0], [22.0, 1610.0], [370.0, 6620.0], [442.0, 1146.5], [443.0, 3332.0], [27.0, 6025.0], [509.0, 127.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1548.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 386.0, "series": [{"data": [[52.0, 148.5], [241.0, 151.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [603.0, 136.0], [669.0, 155.0], [658.0, 386.0], [712.0, 167.0], [716.0, 246.0], [726.0, 0.0], [736.0, 190.0], [745.0, 286.0], [744.0, 362.0], [793.0, 190.0], [780.0, 0.0], [812.0, 220.0], [848.0, 248.0], [844.0, 349.0], [958.0, 0.0], [1248.0, 0.0], [91.0, 0.0], [1548.0, 0.0], [123.0, 0.0], [156.0, 0.0], [185.0, 220.0], [241.0, 108.0], [1.0, 0.0], [366.0, 116.0], [22.0, 0.0], [370.0, 0.0], [442.0, 0.0], [443.0, 0.0], [27.0, 0.0], [509.0, 127.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1548.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 286.4166666666667, "minX": 1.7305908E12, "maxY": 286.4166666666667, "series": [{"data": [[1.7305908E12, 286.4166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7305908E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7305908E12, "maxY": 169.61666666666667, "series": [{"data": [[1.7305908E12, 1.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7305908E12, 169.61666666666667]], "isOverall": false, "label": "429", "isController": false}, {"data": [[1.7305908E12, 115.8]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7305908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7305908E12, "maxY": 285.4166666666667, "series": [{"data": [[1.7305908E12, 285.4166666666667]], "isOverall": false, "label": "Get Authorized User-failure", "isController": false}, {"data": [[1.7305908E12, 1.0]], "isOverall": false, "label": "Get Authorized User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7305908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7305908E12, "maxY": 285.4166666666667, "series": [{"data": [[1.7305908E12, 1.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7305908E12, 285.4166666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7305908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

